// LOCALE EN_US

YearRule =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.YearRule" }
MonthOfYear1 =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.MonthOfYear1" }

MonthAndYearRule1 =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.MonthAndYearRule1" }
MonthAndDayRule1 =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.MonthAndDayRule1" }
MonthAndDayRule2 =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.MonthAndDayRule2" }
MonthAndDayRule3 =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.MonthAndDayRule3" }
MonthAndDayRule4 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.MonthAndDayRule4" }

DayOfWeekRule1 =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.DayOfWeekRule1" }
DayOfWeekRule2 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.DayOfWeekRule2" }
DayOfWeekRule3 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.DayOfWeekRule3" }

DayOfWeekOrderRule1 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.DayOfWeekOrderRule1" }
DayOfWeekOrderRule2 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.DayOfWeekOrderRule2" }

DayOrderAndMonthRule1 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.DayOrderAndMonthRule1" }
DayOrderAndMonthRule2 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.DayOrderAndMonthRule2" }

MonthAndDayRule0 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.MonthAndDayRule0" }

Time1Rule = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.time.Time1Rule" }
Time2Rule= { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.time.Time2Rule" }
Time3Rule = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.time.Time3Rule" }
Time4Rule = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.time.Time4Rule" }

TimeOfDayRule = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.time.TimeOfDayRule" }

SeasonRules =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.dateinterval.SeasonRules" }
SeasonRules2 =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.dateinterval.SeasonRules2" }

MonthDaysIntervalRule1  =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.dateinterval.MonthDaysIntervalRule1" }
MonthToMonthRule1 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.dateinterval.MonthToMonthRule1" }

DayOfWeekIntervalRule1 =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.dateinterval.DayOfWeekIntervalRule1" }
BetweenTimeEvent = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.BetweenTimeEvent" }

// composite rule classes
CompositeTime4RuleMonthAndDayRule0 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.composite.CompositeTime4RuleMonthAndDayRule0" }
CompositeDayOfWeekTimeOfDay = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.composite.CompositeDayOfWeekTimeOfDay" }

FrequencyTime = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.frequency.FrequencyTime" }

ner = { type: "CLASS", value: "edu.stanford.nlp.ling.CoreAnnotations$NamedEntityTagAnnotation" }

############################## RULES OVER TEXT AND TOKENS #########################################

// month of the year, ex. October 
   { ruleType: "tokens", 
     priority:0,
     matchWithResults: TRUE,
     pattern: (/($MONTH_OF_YEAR)/),
     action: Annotate($0, ner, "MonthOfYear1"),
     result: MonthOfYear1($$0.text) 
  }
  
  // year, ex. 2014 
  
   { ruleType: "tokens", 
     priority:0,
     matchWithResults: TRUE,
     pattern: (/([2][0]\d\d)/),
     action: Annotate($0, ner, "YearRule"),
  	 result: YearRule($$0.text) 
  }
  
    // time of day: morning, evening, etc.
  
   { ruleType: "tokens", 
     priority:0,
     matchWithResults: TRUE,
     pattern: (/($TIME_OF_DAY)[s]?/),
     action: Annotate($0, ner, "TimeOfDayRule"),
  	 result: TimeOfDayRule($$0.text) 
  }
  
  
  // frequency: yearly, weekly, monthly, etc.
  
   { ruleType: "tokens", 
     priority:2,
     matchWithResults: TRUE,
     pattern: (/daily|weekly|monthly|yearly/),
     action: Annotate($0, ner, "FrequencyTime"),
  	 result: FrequencyTime($$0.text) 
  }
  
   // October 2012  or Oct. 2012
  
   { ruleType: "tokens", 
     priority:1,
     matchWithResults: TRUE,
     pattern: ( (/($MONTH_OF_YEAR|$MONTH_OF_YEAR_EASY)/) /[,;.]/? (/([2][0]\d\d)/) ),
     action: Annotate($0, ner, "MonthAndYearRule1"),
  	 result: MonthAndYearRule1($$1.matchResults[0].word.group(1),$$2.matchResults[0].word.group(1)) 
  }
  
    // July 14 2014, July 14
  
   { ruleType: "tokens", 
    priority:2,
    matchWithResults: TRUE,
    pattern: ( (/(($MONTH_OF_YEAR|$MONTH_OF_YEAR_EASY))/)/[,;.]/?(/([1-2][0-9]|[3][0-1]|[1-9])/) /,/? (/([2][0-9]\d\d)/)? ),
    action: Annotate($0, ner, "MonthAndDayRule0"),
  	result: MonthAndDayRule0($$1.matchResults[0].word.group(1), $$2.matchResults[0].word.group(1), $$3.matchResults[0].word.group(1)) 
  }
  
  // July the 14th 2014, July 14 2014, July 14
  
   { ruleType: "tokens", 
    priority:3,
     matchWithResults: TRUE,
     action: Annotate($0, ner, "MonthAndDayRule1"),
    pattern: ( (/($MONTH_OF_YEAR|$MONTH_OF_YEAR_EASY)/) /,/? /the/? (/([1-2][0-9]|[3][0-1]|[1-9])(th|st|nd)?/) /of/? (/([2][0-9]\d\d)/)? ),
  	result: MonthAndDayRule1($$1.matchResults[0].word.group(1),$$2.matchResults[0].word.group(1),$$3.matchResults[0].word.group(1)) 
  }
  
   // 14th July 2012
  
   { ruleType: "tokens", 
    priority:2,
    matchWithResults: TRUE,
    action: Annotate($0, ner, "MonthAndDayRule2"),
    pattern: ( /the/? (/([1-2][0-9]|[3][0-1]|[1-9])(th|st|rd|nd)?/) /(of|[,])/? (/($MONTH_OF_YEAR|$MONTH_OF_YEAR_EASY)/) /[,]/? /(of|[,])/? (/([2][0-9]\d\d)/)? ),
  	result: MonthAndDayRule2($$1.matchResults[0].word.group(1),$$2.matchResults[0].word.group(1),$$3.matchResults[0].word.group(1)) 
  }
  
    // day of week, ex. Sunday, 
  
   { ruleType: "tokens", 
    priority:1,
    matchWithResults: TRUE,
    action: Annotate($0, ner, "DayOfWeekRule1"),
    pattern: (/($DAY_OF_WEEK|$DAYOFWEEK_EASY)[s]?/),
  	result: DayOfWeekRule1($$0.text) 
  	
  }
    
    // day of week, ex. Sunday 16 , 
  
   { ruleType: "tokens", 
     matchWithResults: TRUE,
     priority:2,
     pattern: ( (/($DAY_OF_WEEK|$DAYOFWEEK_EASY)/) (/([1-2][0-9]|[3][0-1]|[1-9])/) ),
     action: Annotate($0, ner, "DayOfWeekRule2"),
  	 result: DayOfWeekRule2($$1.matchResults[0].word.group(1), $$2.matchResults[0].word.group(1)) 
  }
  
   // day of week, ex. Sunday 16 2014, 
  
   { ruleType: "tokens", 
    priority:3,
    matchWithResults: TRUE,
    pattern: ( ( /($DAY_OF_WEEK|$DAYOFWEEK_EASY)[s]?/) /[,]/? (/(\b[1-2][0-9]\b|\b[3][0-1]\b|\b[1-9]\b)/) /[,]/? (/([2][0-9]\d\d)/) ),
  	action: Annotate($0, ner, "DayOfWeekRule3"),
  	result: DayOfWeekRule3($$1.matchResults[0].word.group(1), $$2.matchResults[0].word.group(1),$$3.matchResults[0].word.group(1)) 
  }
  
    //Wed
  
   { ruleType: "tokens", 
    priority:1,
    matchWithResults: TRUE,
    action: Annotate($0, ner, "DayOfWeekRule1"),
    pattern: (/($DAYOFWEEK_EASY)([.])?[s]?/),
  	result: DayOfWeekRule1($$0.matchResults[0].word.group(1)) 
  }
  
     // the first Tuesday (of the month)
  
  { ruleType: "tokens", 
    priority:3,
    matchWithResults: TRUE,
    action: Annotate($0, ner, "DayOfWeekOrderRule1"),
    pattern: ( /the/? (/($BasicOrdTerm)/) /(of)/? (/($DAY_OF_WEEK)[s]?/) (/of/ /the/? /month/)? ),
  	result: DayOfWeekOrderRule1($$1.matchResults[0].word.group(1),$$2.matchResults[0].word.group(1)) 
  }
  
  // 30.11.2013
  {
    ruleType: "tokens", 
    priority:1,
    matchWithResults: TRUE,
    pattern: ((/(0[1-9]|[12][0-9]|3[01])[.\/](0[1-9]|1[012])[.\/](([2][0-9])?\d\d)/) ),
    result: BetweenTimeEvent($$1.matchResults[0].word.group(1),$$1.matchResults[0].word.group(2)) 
  }
  
    // 1st Tuesday of the month
  
   { ruleType: "tokens", 
    priority:4,
    matchWithResults: TRUE,
    action: Annotate($0, ner, "DayOfWeekOrderRule2"),
    pattern: ( (/([1-5])(th|st|nd|rd)?/) /(of)/? (/($DAY_OF_WEEK)[s]?/) (/of/ /the/? /month/)? ),
  	result: DayOfWeekOrderRule2($$1.matchResults[0].word.group(1),$$2.matchResults[0].word.group(1)) 
  }
  
  // the second of December
  
   { ruleType: "tokens", 
    priority:0,
    matchWithResults: TRUE,    
    pattern: ( /the[\s]*/? (/($BasicOrdTerm)/) /(of[\s]*)/? (/($MONTH_OF_YEAR)/) /[,;]/? (/([2][0-9]\d\d)/)? ),
  	result: DayOrderAndMonthRule1($$1.matchResults[0].word.group(1),$$2.matchResults[0].word.group(1),$$3.matchResults[0].word.group(1)) 
  }
  
  
     // Sunday 17 of July
  
  { ruleType: "text", 
    pattern: /(($DAY_OF_WEEK)[\s]*((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))[\s]?((of)(the)?[\s]?($MONTH_OF_YEAR)))/,
  	 result: BetweenTimeEvent($0) 
  }
  
  
   // 7pm (time, exact)
  
  { ruleType: "text", 
 	priority:0,
    pattern:  /([\s]|^)(([0-9]|0[0-9]|1[0-9]|2[0-3])[\s]*(([p,P][.]?[m,M])|([a,A][.]?[m,M])))([\s]*($TimeZone))?\b/,
    result: Time1Rule($3,$4,$5) 
  }
  
    //at 5 (time, exact)
   {
   ruleType: "text",
   priority:1,
   pattern: /\b(at about|at)[\s]*(\b[01]?[0-9]|2[0-3]\b)([\s]*($TimeZone))?\b/ ,
   result: Time4Rule($2, $3)  
  }
  
    //at 5:30 (time, exact)
   {
   ruleType: "text",
   priority:2,
   pattern: /([\s]|^)\b(at about|at)[\s]*(\b[01]?[0-9]\b|\b2[0-3]\b)[\s]*(([.|:](\b[0-5][0-9]\b))?)([\s]*($TimeZone))?\b/ ,
   result: Time4Rule($3, $6, $7)  
  }
  
  {
   ruleType: "tokens",
   pattern: ( (/([0-9]|0[0-9]|1[0-9]|2[0-3])([0-5][0-9])/) (/($TimeZone)/) ),
   priority:1,
   matchWithResults: TRUE,
   action: Annotate($0, ner, "Time4Rule"),
   result: Time4Rule($$1.matchResults[0].word.group(1), $$1.matchResults[0].word.group(2), $$2.text)   
  }
 
   //14h00
 
   {
   ruleType: "tokens",
   priority:1,
   matchWithResults: TRUE,
   pattern: ( (/([01]?[0-9]|2[0-3])(h|hours)([0-5][0-9])/) (/($TimeZone)/)?) ,
   result: Time4Rule($$1.matchResults[0].word.group(1), $$1.matchResults[0].word.group(3), $$2.matchResults[0].word.group(1))  
  }
  
   //at 2100 CET
 
   {
   ruleType: "tokens",
   priority:3,
   matchWithResults: TRUE,
   pattern: ( /(at about|at)/ (/([0-9]|0[0-9]|1[0-9]|2[0-3])([0-5][0-9])/) (/($TimeZone)/)? ) ,
   result: Time4Rule($$1.matchResults[0].word.group(1), $$1.matchResults[0].word.group(2), $$2.matchResults[0].word.group(1))  
  }

   //at 5pm, at 5.33 am (time, exact)
   
   {
   ruleType: "tokens",
   priority:3,
   matchWithResults: TRUE,
   pattern: (/at|about/? (/([01]?[0-9]|2[0-3])[\s]*(([.|:])([0-5][0-9]))?[\s]*(([p,P][.]?[m,M][.]?)|([a,A][.]?[m,M][.]?))/) (/($TimeZone)/)?) ,
   result: Time3Rule($$1.matchResults[0].word.group(1), $$1.matchResults[0].word.group(4), $$1.matchResults[0].word.group(5), $$2.matchResults[0].word.group(1))  
  }
  
   // hh:mm CET?
  
   { ruleType: "text", 
    priority:0,
    pattern: /([\s]|^)\b(([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]))([\s]*($TimeZone))?\b/ ,
  	result: Time2Rule($3,$4,$6) 
  }
  
   // season, ex. winter (date interval)
  
   { ruleType: "text", 
    priority:0,
    pattern: /\b($SEASON)[\s]*(months|month|hours)?/,
  	result: SeasonRules($1) 
  }
  
   // season, ex. winter 2014 (date interval)
  
   { ruleType: "text", 
    priority:1,
    pattern: /\b($SEASON)[\s]*([2][0-9]\d\d)\b?/,
  	result: SeasonRules2($1,$2) 
  }
  
    
  // July 28th-31st (date period ), Jul 28th-31st 2014
  
  { ruleType: "text", 
 	priority:4,
    pattern: /\b(($MONTH_OF_YEAR|$MONTH_OF_YEAR_EASY)[\s]*([3][0-1]|[1-2][0-9]|[1-9])[\s]*(th|st|rd|nd)?[\s]*[-][\s]*([3][0-1]|[1-2][0-9]|[1-9])[\s]*(th|st|rd|nd)?)[\s]*(\b[2][0-9]\d\d\b)?\b/,
  	result: MonthDaysIntervalRule1($2,$3,$5, $7) 
  }
  
    //April through October 2014
	
	{ 
    ruleType: "text",  
    priority: 2,
	pattern: /($MONTH_OF_YEAR[.]?|$MONTH_OF_YEAR_EASY[.]?)[\s]*(through|thru|to|-)[\s]*($MONTH_OF_YEAR[.]?|$MONTH_OF_YEAR_EASY[.]?)[\s]*[,]?[\s]*(\b[2][0-9]\d\d\b)?\b/ ,
	result: MonthToMonthRule1($1,$3,$4)
	}
	
	//Wed.-Fri. (date period )
  
  { ruleType: "text", 
    priority:3,
    pattern: /\b($DAYOFWEEK_EASY|$DAY_OF_WEEK)[.]?[\s]*[-][\s]*($DAYOFWEEK_EASY|$DAY_OF_WEEK)[.]?\b/,
  	result: DayOfWeekIntervalRule1($1,$2) 
  }
    
  // Tuesday - Sunday, Wed.-Fri. (date interval)
   
  {  ruleType: "text", 
 	 priority:4,
     pattern: /\b(($DAY_OF_WEEK)[\s]*[-][\s]*($DAY_OF_WEEK))\b/,
  	 result: BetweenTimeEvent($0) 
  }
       
   // October 3-4, 2012; October 3-4 (date interval)
  
   { ruleType: "text", 
    priority:2,
    pattern: /\b(($MONTH_OF_YEAR)[\s]*(\b([1-9]|[1-2][0-9]|[3][0-1])\b))[-](\b([1-9]|[1-2][0-9]|[3][0-1])[.,;][\s]*([2][0-9]\d\d)?\b)/,
  	result: BetweenTimeEvent($0) 
  }
   
   // today, yesterday (? how to parse)
  
   { ruleType: "text", 
    priority:0,
    pattern: /\b(today|yesterday)\b/,
  	result: BetweenTimeEvent($0) 
  }
  
  
  ############ RULES THAT HAVE DOT INSIDE THE RULE ##################

  
  // jan. 21 2014
  
   { ruleType: "text", 
    priority:0,
    pattern: /\b($MONTH_OF_YEAR_EASY)[.][\s]*([1-2][0-9]|[3][0-1]|[1-9])(th|st|nd|rd)?[\s]*[,]?([\s]*(\b[2][0-9]\d\d\b))?\b/,
  	result: MonthAndDayRule4($1,$2,$4) 
  }
  
  // Oct. 2012
  
   { ruleType: "text", 
     priority:1,
     pattern: /($MONTH_OF_YEAR_EASY)[.][\s]*([2][0]\d\d)/,
  	 result: MonthAndYearRule1($1,$2) 
  }
  

  ############COMPOSITE##################

    ENV.defaults["stage"] = 2
    
    // 934 CET, September, 27, 2014; 934 CET, Sep 27 2014
 
   { pattern: (([{ner:Time4Rule}]+) /,/? ([{ner:MonthAndDayRule1}]+) ),  
     name: "CompositeTime4RuleMonthAndDayRule0",
     priority:10,
  	 result: CompositeTime4RuleMonthAndDayRule0($1, $2)
  }
  
    // Friday night, Wed morning
 
   { pattern: (([{ner:DayOfWeekRule1}]) /,/? ([{ner:TimeOfDayRule}]+) ),  
     name: "CompositeDayOfWeekTimeOfDay",
     priority:10,
  	 result: CompositeDayOfWeekTimeOfDay($1, $2)
  }

  ############FILTERS##################
   
   ENV.defaults["stage"] = 3
  
  // the sun
  
  {  ruleType: "text", 
     priority:0,
     pattern: /\b(the sun)\b/, 
     result: BetweenTimeEvent("") 
  }
  
  
  //filter the Sun
  
  { ruleType: "filter", 
    pattern: ( /the/ [ { word:/sun/ }] )  

  }
  
    //filter march of protest
  
  { ruleType: "filter", 
    pattern: ( /march/ /of/ /protest/ )  

  }
       
   // may fall
  
  { ruleType: "filter", 
    pattern: ( /may/ [ { word:/fall/ }] )  

  }
  
   // may be
  
  { ruleType: "filter", 
    pattern: ( /may/ [ { word:/be/ }] )  

  }
   
  { ruleType: "filter", 
    pattern: ( [ { word:/(fall|spring|second|march|may|sat|sun|thus|min)s?/ } & !{ tag:/NN.*/ } ] ) 
   }
  