############################## LOCALE EN_US #########################################

YearRule =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.YearRule" }
MonthOfYear1 =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.MonthOfYear1" }

MonthAndYearRule1 =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.MonthAndYearRule1" }
MonthAndDayRule1 =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.MonthAndDayRule1" }
MonthAndDayRule2 =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.MonthAndDayRule2" }
MonthAndDayRule3 =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.MonthAndDayRule3" }
MonthAndDayRule4 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.MonthAndDayRule4" }
MonthAndDayRule5 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.MonthAndDayRule5" }
MonthDayYearRule1= { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.MonthDayYearRule1" }

DayOfWeekRule1 =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.DayOfWeekRule1" }
DayOfWeekRule2 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.DayOfWeekRule2" }
DayOfWeekRule3 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.DayOfWeekRule3" }

DayOfWeekOrderRule1 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.DayOfWeekOrderRule1" }
DayOfWeekOrderRule2 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.DayOfWeekOrderRule2" }

DayOrderAndMonthRule1 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.DayOrderAndMonthRule1" }

MonthAndDayRule0 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.MonthAndDayRule0" }
MonthAndDayOrderRule6 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.MonthAndDayOrderRule6" }

Time1Rule = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.time.Time1Rule" }
Time2Rule= { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.time.Time2Rule" }
Time3Rule = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.time.Time3Rule" }
Time4Rule = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.time.Time4Rule" }

SeasonRules =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.dateinterval.SeasonRules" }
SeasonRules2 =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.dateinterval.SeasonRules2" }
MonthDaysIntervalRule1  =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.dateinterval.MonthDaysIntervalRule1" }
MonthToMonthRule1 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.dateinterval.MonthToMonthRule1" }
MidLateMonthRule = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.dateinterval.MidLateMonthRule" }

TimeIntervalRule2 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.timeinterval.TimeIntervalRule2" }
TimeIntervalRule3 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.timeinterval.TimeIntervalRule3" }
TimeIntervalRule4= { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.timeinterval.TimeIntervalRule4" }
TimeOfDayRule = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.timeinterval.TimeOfDayRule" }

WeekEnd =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.dateinterval.WeekEnd" }
WeekDay = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.dateinterval.WeekDay" }

DayOfWeekIntervalRule1 =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.dateinterval.DayOfWeekIntervalRule1" }
BetweenTimeEvent = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.BetweenTimeEvent" }
TodayTomorrowEtc = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.TodayTomorrowEtc" }

// composite rule classes
CompositeTime4RuleMonthAndDayRule0 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.composite.CompositeTime4RuleMonthAndDayRule0" }
CompositeDayOfWeekTimeOfDay = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.composite.CompositeDayOfWeekTimeOfDay" }
CompositeDayOfWeekDate = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.composite.CompositeDayOfWeekDate" }

FrequencyTime = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.frequency.FrequencyTime" }

//set
EveryPeriod  =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.set.EveryPeriod" }
AllPeriod =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.set.AllPeriod" }

CompositeSet1 =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.set.CompositeSet1" }


ner = { type: "CLASS", value: "edu.stanford.nlp.ling.CoreAnnotations$NamedEntityTagAnnotation" }

############################## RULES OVER TEXT AND TOKENS #########################################


  // thru August, Aug.
  
   { ruleType: "tokens", 
     priority:0,
     matchWithResults: TRUE,
     pattern: (/through|thru/? (/($MONTH_OF_YEAR|$MONTH_OF_YEAR_EASY)[.]?/)),
     action: Annotate($0, ner, "MonthOfYear1"),
     result: MonthOfYear1($$1.matchResults[0].word.group(1)) 
  }
  
  	//mid or mid-late month
	
	{ 
    ruleType: "tokens",  
    priority: 1,
    matchWithResults: TRUE,
    pattern: ( (/(mid|mid-late)[-]*($MONTH_OF_YEAR|$MONTH_OF_YEAR_EASY)([.])?/) ) ,
	result: MidLateMonthRule($$1.matchResults[0].word.group(2)) 
	}
	
      
  // year, ex. 2014 
  
   { ruleType: "tokens", 
     priority:0,
     matchWithResults: TRUE,
     pattern: (/in/? (/([2][0]\d\d)/)),
     action: Annotate($0, ner, "YearRule"),
  	 result: YearRule($$1.matchResults[0].word.group(1)) 
  }
  
    // time of day: morning, evening, etc.
  
   { ruleType: "tokens", 
     priority:0,
     matchWithResults: TRUE,
     pattern: (/($TIME_OF_DAY)[s]?/),
     action: Annotate($0, ner, "TimeOfDayRule"),
  	 result: TimeOfDayRule($$0.text) 
  }
  
     // time of day: morning, evening, etc.
  
   { ruleType: "tokens", 
     priority:0,
     matchWithResults: TRUE,
     pattern: ( (/($TIME_OF_DAY)[s]?/) /hours/),
     action: Annotate($0, ner, "TimeOfDayRule"),
  	 result: TimeOfDayRule($$1.matchResults[0].word.group(1)) 
  }
  
   // every/each day, week, month, year
  
   { ruleType: "tokens", 
     priority:0,
     matchWithResults: TRUE,
     pattern: ( (/(every|each)/)(/(day|week|month|year)/)),
     action: Annotate($0, ner, "EveryPeriod"),
  	 result: EveryPeriod($$2.matchResults[0].word.group(1)) 
  }
  
    // whole|all|entire day, week, month, year
  
   { ruleType: "tokens", 
     priority:0,
     matchWithResults: TRUE,
     pattern: ( (/(whole|all|entire)/) (/(day|week|month|year)/) ),
     action: Annotate($0, ner, "AllPeriod"),
  	 result: AllPeriod($$2.matchResults[0].word.group(1)) 
  }
    
  // frequency: yearly, weekly, monthly, etc.
  
   { ruleType: "tokens", 
     priority:2,
     matchWithResults: TRUE,
     pattern: (/daily|weekly|monthly|yearly/),
     action: Annotate($0, ner, "FrequencyTime"),
  	 result: FrequencyTime($$0.text) 
  }
  
   // weekend, weekends, week-end, week-ends
  
   { ruleType: "tokens", 
     priority:2,
     matchWithResults: TRUE,
     pattern: (/weekend|weekends|week-end|week-ends/),
     action: Annotate($0, ner, "WeekEnd"),
  	 result: WeekEnd() 
  }
  
   // weekday week day  	  	
 {
   ruleType: "tokens", 
   priority:2,
   matchWithResults: TRUE,
   pattern: ( ((/week/ /days/)|(/weekdays/)|(/weekday/)|(/week/ /day/))),
   action: Annotate($0, ner, "WeekDay"),
   result: WeekDay() 
  }
  
 
    // October 2012  or Oct. 2012
  
   { ruleType: "tokens", 
     priority:1,
     matchWithResults: TRUE,
     pattern: (/thru|through/? (/($MONTH_OF_YEAR|$MONTH_OF_YEAR_EASY)([.])?/) /[,;.]/? (/([2][0]\d\d)/) ),
     action: Annotate($0, ner, "MonthAndYearRule1"),
  	 result: MonthAndYearRule1($$1.matchResults[0].word.group(1),$$2.matchResults[0].word.group(1)) 
  }
  
    // July 14 2014, July 14
  
   { ruleType: "tokens", 
    priority:2,
    matchWithResults: TRUE,
    pattern: ( (/(($MONTH_OF_YEAR|$MONTH_OF_YEAR_EASY))/)/[,;.]/?(/([1-2][0-9]|[3][0-1]|[1-9])/) /,/? (/([2][0-9]\d\d)/)? ),
    action: Annotate($0, ner, "MonthAndDayRule0"),
  	result: MonthAndDayRule0($$1.matchResults[0].word.group(1), $$2.matchResults[0].word.group(1), $$3.matchResults[0].word.group(1)) 
  }
  
   // Jan-2013
   
  {  ruleType: "tokens", 
     priority:1,
     matchWithResults: TRUE,
     pattern: ( (/($MONTH_OF_YEAR_EASY)[-](2[0-9]\d\d)/) ), 
     result: MonthAndDayRule0($$1.matchResults[0].word.group(1), $$1.matchResults[0].word.group(2)) 
  }
  
  // July the 14th 2014, July 14 2014, July 14
  
   { ruleType: "tokens", 
    priority:3,
     matchWithResults: TRUE,
     action: Annotate($0, ner, "MonthAndDayRule1"),
    pattern: ( (/($MONTH_OF_YEAR|$MONTH_OF_YEAR_EASY)/)/,/?/the/?(/([1-2][0-9]|[3][0-1]|[1-9])(th|st|nd)?/)/,/? /of/? (/([2][0-9]\d\d)/)? ),
  	result: MonthAndDayRule1($$1.matchResults[0].word.group(1),$$2.matchResults[0].word.group(1),$$3.matchResults[0].word.group(1)) 
  }
  
   // 14th July 2012
  
   { ruleType: "tokens", 
    priority:2,
    matchWithResults: TRUE,
    action: Annotate($0, ner, "MonthAndDayRule2"),
    pattern: ( /the/? (/([1-2][0-9]|[3][0-1]|[1-9])(th|st|rd|nd)?/) /(of|[,])/? (/($MONTH_OF_YEAR|$MONTH_OF_YEAR_EASY)/) /[,]/? /(of|[,])/? (/([2][0-9]\d\d)/)? ),
  	result: MonthAndDayRule2($$1.matchResults[0].word.group(1),$$2.matchResults[0].word.group(1),$$3.matchResults[0].word.group(1)) 
  }
  
    // day of week, ex. Sunday, 
  
   { ruleType: "tokens", 
    priority:1,
    matchWithResults: TRUE,
    action: Annotate($0, ner, "DayOfWeekRule1"),
    pattern: (/($DAY_OF_WEEK|$DAYOFWEEK_EASY)[.]?[s]?/),
  	result: DayOfWeekRule1($$0.text) 
  	
  }
    
    // day of week, ex. Sunday 16 , 
  
   { ruleType: "tokens", 
     matchWithResults: TRUE,
     priority:2,
     pattern: ( (/($DAY_OF_WEEK|$DAYOFWEEK_EASY)/) (/([1-2][0-9]|[3][0-1]|[1-9])/) ),
     action: Annotate($0, ner, "DayOfWeekRule2"),
  	 result: DayOfWeekRule2($$1.matchResults[0].word.group(1), $$2.matchResults[0].word.group(1)) 
  }
  
   // day of week, ex. Sunday 16 2014, 
  
   { ruleType: "tokens", 
    priority:3,
    matchWithResults: TRUE,
    pattern: ( ( /($DAY_OF_WEEK|$DAYOFWEEK_EASY)[s]?/) /[,]/? (/(\b[1-2][0-9]\b|\b[3][0-1]\b|\b[1-9]\b)/) /[,]/? (/([2][0-9]\d\d)/) ),
  	action: Annotate($0, ner, "DayOfWeekRule3"),
  	result: DayOfWeekRule3($$1.matchResults[0].word.group(1), $$2.matchResults[0].word.group(1),$$3.matchResults[0].word.group(1)) 
  }
  
    //Wed
  
   { ruleType: "tokens", 
    priority:1,
    matchWithResults: TRUE,
    action: Annotate($0, ner, "DayOfWeekRule1"),
    pattern: (/($DAYOFWEEK_EASY)([.])?[s]?/),
  	result: DayOfWeekRule1($$0.matchResults[0].word.group(1)) 
  }
  
     // the first Tuesday (of the month)
  
  { ruleType: "tokens", 
    priority:3,
    matchWithResults: TRUE,
    action: Annotate($0, ner, "DayOfWeekOrderRule1"),
    pattern: (/the/?(/($BasicOrdTerm)/) /(of)/? (/($DAY_OF_WEEK|$DAYOFWEEK_EASY)[s]?/) (/of/ /the/? /month/)? ),
  	result: DayOfWeekOrderRule1($$1.matchResults[0].word.group(1),$$2.matchResults[0].word.group(1)) 
  }
  
  // 30.11.2013
  {
    ruleType: "tokens", 
    priority:1,
    matchWithResults: TRUE,
    pattern: ((/(0[1-9]|[12][0-9]|3[01])[.\/](0[1-9]|1[012])[.\/](([2][0-9])?\d\d)/) ),
    result: MonthDayYearRule1($$1.matchResults[0].word.group(1),$$1.matchResults[0].word.group(2),$$1.matchResults[0].word.group(3)) 
  }
  
    // 1st Tuesday of the month
  
   { ruleType: "tokens", 
    priority:4,
    matchWithResults: TRUE,
    action: Annotate($0, ner, "DayOfWeekOrderRule2"),
    pattern: (/the/? (/([1-5])(th|st|nd|rd)?/) /(of)/? (/($DAY_OF_WEEK)[s]?/) (/of/ /the/? /month/)? ),
  	result: DayOfWeekOrderRule2($$1.matchResults[0].word.group(1),$$2.matchResults[0].word.group(1)) 
  }
  
  // the second of December
  
   { ruleType: "tokens", 
    priority:0,
    matchWithResults: TRUE,    
    pattern: ( /the[\s]*/? (/($BasicOrdTerm)/) /(of[\s]*)/? (/($MONTH_OF_YEAR)/) /[,;]/? (/([2][0-9]\d\d)/)? ),
  	result: DayOrderAndMonthRule1($$1.matchResults[0].word.group(1),$$2.matchResults[0].word.group(1),$$3.matchResults[0].word.group(1)) 
  }
    
   // Sunday 17 of July
  
  { ruleType: "tokens", 
    pattern: ((/($DAY_OF_WEEK)/) /,/? (/([1-2][0-9]|[3][0-1]|[1-9])/) /(of)(the)?/? (/($MONTH_OF_YEAR)/) ),
    matchWithResults: TRUE,    
  	result: MonthAndDayRule5($$1.matchResults[0].word.group(1), $$2.matchResults[0].word.group(1), $$3.matchResults[0].word.group(1)) 
  }
         
  // March the Fourteenth, 2011
   
  {  ruleType: "text", 
     priority:3,
     pattern: /\b($MONTH_OF_YEAR)[\s]*(the)?[\s]*($BasicOrdTerm)[,]?([\s]*of)?[\s]*((19|20)\d\d)\b/, 
     result: MonthAndDayOrderRule6($1,$3,$5) 
  }
                
   // today, yesterday (? how to parse)
  
   { ruleType: "tokens", 
    priority:1,
    matchWithResults: TRUE,
    pattern: ( ((/today/)|(/yesterday/)|(/tomorrow/)|(/the/ /day/ /before/ /yesterday/)) ),
  	result: TodayTomorrowEtc($$0.text) 
  }
  
  // jan. 21 2014
  
   { ruleType: "tokens", 
    priority:0,
    matchWithResults: TRUE, 
    pattern: ( (/($MONTH_OF_YEAR_EASY)[.]?/) (/([1-2][0-9]|[3][0-1]|[1-9])(th|st|nd|rd)?/)/[,]/? (/([2][0-9]\d\d)/)? ),
  	result: MonthAndDayRule4($$1.matchResults[0].word.group(1),$$2.matchResults[0].word.group(1),$$3.matchResults[0].word.group(1)) 
  }
    
  ############################## Time exact #########################################
  
    
   // at 7pm (time, exact)
  
  { ruleType: "tokens", 
 	priority:1,
    matchWithResults: TRUE,
    pattern:  (/at about|about|at/? (/(([0-9]|0[0-9]|1[0-9]|2[0-3])[\s]*(([p,P][.]?[m,M])|([a,A][.]?[m,M])))/) (/($TimeZone)/)? ),
    action: Annotate($0, ner, "Time1Rule"),
    result: Time1Rule($$1.matchResults[0].word.group(2),$$1.matchResults[0].word.group(3),$$2.matchResults[0].word.group(1)) 
  }
  
    //at 5 (time, exact)
   {
   ruleType: "tokens",
   priority:2,
   matchWithResults: TRUE,
   pattern: (/at about|at|about/  (/([01]?[0-9]|2[0-3])/) (/($TimeZone)/)? ) ,
   action: Annotate($0, ner, "Time5Rule"),
   result: Time4Rule($$1.matchResults[0].word.group(1), $$2.text)  
  }
  
  //at 5:30 (time, exact)
   {
   ruleType: "tokens",
   priority:2,
   matchWithResults: TRUE,
   pattern: ( /at/? /about/? (/([01]?[0-9]|2[0-3])[.:]([0-5][0-9])/) (/($TimeZone)/)? ) ,
   action: Annotate($0, ner, "Time4Rule"),
   result: Time4Rule($$1.matchResults[0].word.group(1), $$1.matchResults[0].word.group(2), $$2.text)  
  }
 

  // 2100 CET
  {
   ruleType: "tokens",
   pattern: ( (/([0-9]|0[0-9]|1[0-9]|2[0-3])([0-5][0-9])/) (/($TimeZone)/) ),
   priority:1,
   matchWithResults: TRUE,
   action: Annotate($0, ner, "Time4Rule"),
   result: Time4Rule($$1.matchResults[0].word.group(1), $$1.matchResults[0].word.group(2), $$2.text)   
  }
  
  
   //14h00
 
   {
   ruleType: "tokens",
   priority:1,
   matchWithResults: TRUE,
   pattern: ( (/([01]?[0-9]|2[0-3])(h|hours)([0-5][0-9])/) (/($TimeZone)/)?) ,
   action: Annotate($0, ner, "Time4Rule"),
   result: Time4Rule($$1.matchResults[0].word.group(1), $$1.matchResults[0].word.group(3), $$2.matchResults[0].word.group(1))  
  }
  
   //at 2100 CET
 
   {
   ruleType: "tokens",
   priority:3,
   matchWithResults: TRUE,
   pattern: ( /(at about|at)/ (/([0-9]|0[0-9]|1[0-9]|2[0-3])([0-5][0-9])/) (/($TimeZone)/)? ) ,
   action: Annotate($0, ner, "Time4Rule"),
   result: Time4Rule($$1.matchResults[0].word.group(1), $$1.matchResults[0].word.group(2), $$2.matchResults[0].word.group(1))  
  }

   //at 5 pm, at 5.33 am (time, exact)
   
   {
   ruleType: "tokens",
   priority:5,
   matchWithResults: TRUE,
   pattern: (/at/? /about/? (/([01]?[0-9]|2[0-3])[\s]*(([.|:])([0-5][0-9]))?/) (/(([p,P][.]?[m,M][.]?)|([a,A][.]?[m,M][.]?))/) (/($TimeZone)/)?) ,
   action: Annotate($0, ner, "Time3Rule"),
   result: Time3Rule($$1.matchResults[0].word.group(1), $$1.matchResults[0].word.group(4), $$2.matchResults[0].word.group(1), $$3.matchResults[0].word.group(1))  
  }
  
   // hh:mm CET?
  
   { ruleType: "tokens", 
    priority:0,
    matchWithResults: TRUE,
    action: Annotate($0, ner, "Time2Rule"),
    pattern: ( (/([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])/) (/($TimeZone)/)? ) ,
  	result: Time2Rule($$1.matchResults[0].word.group(1),$$1.matchResults[0].word.group(2),$$2.matchResults[0].word.group(1)) 
  }
    
    ############################## Time interval #########################################
  
      
   //after 5:30, until 5:30 (open interval)
   {
   ruleType: "tokens",
   priority:2,
    matchWithResults: TRUE,
   pattern: ((/(after|before|until|till|til|by)/)(/([01]?[0-9]|2[0-3])[\s]*([.|:]([0-5][0-9]))?/) (/($TimeZone)/)? ) ,
   result: TimeIntervalRule3($$1.matchResults[0].word.group(1), $$2.matchResults[0].word.group(1), $$2.matchResults[0].word.group(3), $$3.text)  
  }
  
  // by 2100 CET
  {
   ruleType: "tokens",
   pattern: ((/(after|before|until|till|til|by)/) (/([0-9]|0[0-9]|1[0-9]|2[0-3])([0-5][0-9])/) (/($TimeZone)/) ),
   priority:1,
   matchWithResults: TRUE,
   action: Annotate($0, ner, "Time4Rule"),
   result: TimeIntervalRule3($$1.matchResults[0].word.group(1), $$2.matchResults[0].word.group(1), $$2.matchResults[0].word.group(2), $$3.text)   
  }
  
   //by 5 pm, until 5.33 am (open interval)
   
   {
   ruleType: "tokens",
   priority:5,
   matchWithResults: TRUE,
   pattern: ((/(after|before|until|till|til|by)/) (/([01]?[0-9]|2[0-3])[\s]*(([.|:])([0-5][0-9]))?/)(/(([p,P][.]?[m,M][.]?)|([a,A][.]?[m,M][.]?))/) (/($TimeZone)/)?) ,
   result: TimeIntervalRule4($$1.matchResults[0].word.group(1), $$2.matchResults[0].word.group(1), $$2.matchResults[0].word.group(4), $$3.matchResults[0].word.group(1), $$4.matchResults[0].word.group(1))  
  }
  
   // after 7pm (time, exact)
  
  { ruleType: "tokens", 
 	priority:0,
    matchWithResults: TRUE,
    pattern:  ( (/(after|before|until|till|til|by)/) (/(([0-9]|0[0-9]|1[0-9]|2[0-3])[\s]*(([p,P][.]?[m,M])|([a,A][.]?[m,M])))/) (/($TimeZone)/)? ),
    result: TimeIntervalRule4($$1.matchResults[0].word.group(1), $$2.matchResults[0].word.group(2),$$2.matchResults[0].word.group(3),$$3.matchResults[0].word.group(1)) 
  }
      
      
############################## Date Interval #########################################
            
   // season, ex. winter (date interval)
  
   { ruleType: "tokens", 
    priority:0,
    matchWithResults: TRUE,
    pattern: (/\b(fall|winter|summer|spring|autumn)[s]?\b/ /month|months|hours/?),
  	result: SeasonRules($$0.text) 
  }
  
   // season, ex. winter 2014 (date interval)
  
   { ruleType: "tokens", 
    priority:1,
    matchWithResults: TRUE,
    pattern: ((/(fall|winter|summer|spring|autumn)/) (/([2][0-9]\d\d)/)),
  	result: SeasonRules2($$1.matchResults[0].word.group(1),$$2.matchResults[0].word.group(1)) 
  }
  
  // July 28th-31st (date period ), Jul 28th-31st 2014
  
  { ruleType: "tokens", 
 	priority:4,
 	matchWithResults: TRUE,
    pattern: ( (/($MONTH_OF_YEAR|$MONTH_OF_YEAR_EASY)[.]?/) (/([3][0-1]|[1-2][0-9]|[1-9])[\s]*(th|st|rd|nd)?[\s]*[-][\s]*([3][0-1]|[1-2][0-9]|[1-9])[\s]*(|th|st|rd|nd)?/)/,/?(/([2][0-9]\d\d)/)? ),
  	result: MonthDaysIntervalRule1($$1.matchResults[0].word.group(1),$$2.matchResults[0].word.group(1),$$2.matchResults[0].word.group(3), $$3.matchResults[0].word.group(1)) 
  }

    //April through,to,- October 2014
	
	{ 
    ruleType: "tokens",  
    priority: 2,
    matchWithResults: TRUE,
	pattern: ( (/($MONTH_OF_YEAR|$MONTH_OF_YEAR_EASY)([.]?)/)/(through|thru|to|-)/(/($MONTH_OF_YEAR|$MONTH_OF_YEAR_EASY)([.]?)/) /[,]/?(/([2][0-9]\d\d)/)? ) ,
	result: MonthToMonthRule1($$1.matchResults[0].word.group(1),$$2.matchResults[0].word.group(1),$$3.matchResults[0].word.group(1))
	}
	
	// Wed.-Fri. (date period )
  
  { ruleType: "tokens", 
    priority:5,
    matchWithResults: TRUE,
    pattern: ( (/($DAY_OF_WEEK|$DAYOFWEEK_EASY)([.])?([-\s])*($DAY_OF_WEEK|$DAYOFWEEK_EASY)([.])?/) ),
  	result: DayOfWeekIntervalRule1($$1.matchResults[0].word.group(1),$$0.matchResults[0].word.group(4)) 
  }
  

   // Monday to Tuesday
     
   { ruleType: "tokens", 
    priority:5,
    matchWithResults: TRUE,
    pattern: (/from/? (/($DAY_OF_WEEK|$DAYOFWEEK_EASY)([.])?/)/(-|to|thru|through)/(/($DAY_OF_WEEK|$DAYOFWEEK_EASY)([.])?/) ),
  	result: DayOfWeekIntervalRule1($$1.matchResults[0].word.group(1),$$2.matchResults[0].word.group(1)) 
  }
    

  // between morning and evening
  
  {
   ruleType: "tokens",
   matchWithResults: TRUE, 
   pattern: ( /between/ (/($TIME_OF_DAY)/) /(and|to|until|til)|[-]/ (/($TIME_OF_DAY)/) ) ,
   result: TimeIntervalRule2($$1.matchResults[0].word.group(1),$$2.matchResults[0].word.group(1))
  }
  
  ############COMPOSITE##################

    ENV.defaults["stage"] = 2
    
    // 934 CET, September, 27, 2014; 934 CET, Sep 27 2014
 
   { pattern: (([{ner:Time4Rule}]+) /,/? ([{ner:MonthAndDayRule1}]+) ),  
     name: "CompositeTime4RuleMonthAndDayRule0",
     priority:10,
  	 result: CompositeTime4RuleMonthAndDayRule0($$1.text, $$2.text)
  }
  
    // Friday night, Wed morning
 
   { pattern: (([{ner:DayOfWeekRule1}]) /,/? ([{ner:TimeOfDayRule}]+) ),  
     name: "CompositeDayOfWeekTimeOfDay",
     priority:10,
  	 result: CompositeDayOfWeekTimeOfDay($$1.text, $$2.text)
  }
  
  
   // Sunday at 4
  
  { pattern: (([{ner:DayOfWeekRule1}]) /,/? ([{ner:Time5Rule}]+) ),  
     name: "CompositeDayOfWeekTimeOfDay3",
     priority:10,
  	 result: CompositeDayOfWeekTimeOfDay($$1.text, $$2.text)
  }
  
  
   // the first Sunday of every month
 
   { pattern: ( ([{ner:DayOfWeekOrderRule1}]+) /.f/? (/every/|/each/) /month/ ),  
     name: "CompositeDayOfWeekTimeOfDay",
     priority:10,
  	 result: CompositeSet1($$1.text)
  }
  
     // every first Sunday 
 
   { pattern: ( /every/ ([{ner:DayOfWeekOrderRule1}]+) ),  
     name: "CompositeDayOfWeekTimeOfDay",
     priority:10,
  	 result: CompositeSet1($$1.text)
  }
  
    // every 1st Sunday 
 
   { pattern: ( /every/ ([{ner:DayOfWeekOrderRule2}]+) ),  
     name: "CompositeDayOfWeekTimeOfDay",
     priority:10,
  	 result: CompositeSet1($$1.text)
  }
  
    // the 1st Sunday  of every month
 
   { pattern: ( ([{ner:DayOfWeekOrderRule2}]+) /.f/? (/every/|/each/) /month/ ),  
     name: "CompositeDayOfWeekTimeOfDay",
     priority:10,
  	 result: CompositeSet1($$1.text)
  }
  
    // Tuesday September 16
 
   { pattern: ( ([{ner:DayOfWeekRule1}]+) /,/? ([{ner:MonthAndDayRule1}]+) ),  
     name: "CompositeDayOfWeekTimeOfDay",
     priority:10,
  	 result: CompositeDayOfWeekDate($$1.text, $$2.text)
  }
    
  
  ############OWN COMPOSITE##################
  
   ENV.defaults["stage"] = 3



  ############FILTERS##################
   
   ENV.defaults["stage"] = 4
  
  // the sun
  
  {  ruleType: "text", 
     priority:0,
     pattern: /\b(the sun)\b/, 
     result: BetweenTimeEvent("") 
  }
  
    // the sun
  
  {  ruleType: "text", 
     priority:0,
     pattern: /\b(sun storm)\b/, 
     result: BetweenTimeEvent("") 
  }
  
  // fall from
  
  {  ruleType: "text", 
     priority:0,
     pattern: /\b(fall from)\b/, 
     result: BetweenTimeEvent("") 
  }
  
   
  //filter the Sun
  
  { ruleType: "filter", 
    pattern: ( /the/ [ { word:/sun/ }] )  

  }
  
    { ruleType: "filter", 
    pattern: ( /sun/ [ { word:/storm/ }] )  

  }
  
    //filter march of protest
  
  { ruleType: "filter", 
    pattern: ( /march/ /of/ /protest/ )  

  }
       
   // may fall
  
  { ruleType: "filter", 
    pattern: ( /may/ [ { word:/fall/ }] )  

  }
  
    // fall from
  
  { ruleType: "filter", 
    pattern: ( /fall/ [ { word:/from/ }] )  

  }
  
   // may be
  
  { ruleType: "filter", 
    pattern: ( /may/ [ { word:/be/ }] )  

  }
   
  { ruleType: "filter", 
    pattern: ( [ { word:/(fall|spring|second|march|may|sun|thus|min)s?/ } & !{ tag:/NN.*/ } ] ) 
   }
   
     {  pattern: ( /the/ [ { word:/second/ } & !{ tag:/NN.*/ } ] )  }
   
  