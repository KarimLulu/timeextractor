  
     // the first Sunday of the month in 2014
 
   { pattern: ( ([{ner:DayOfWeekOrderRule1}]+) /in/? ([{ner:YearRule}]+)  ),  
     name: "OrderYearTemporal",
     priority:10,
  	 result: OrderYearTemporal($$1.text,$$2.text)
  }
    
      
   // the first Sunday of every month
 
   { pattern: ( ([{ner:DayOfWeekOrderRule1}]+) /.f/? (/every/|/each/) /month/ ),  
     name: "CompositeSet1",
     priority:10,
  	 result: CompositeSet1($$1.text)
  }
  
     // every first Sunday 
 
   { pattern: ( /every/ ([{ner:DayOfWeekOrderRule1}]+) ),  
     name: "CompositeSet1",
     priority:10,
  	 result: CompositeSet1($$1.text)
  }
  
      // every 1st Sunday 
 
   { pattern: ( /every/ ([{ner:DayOfWeekOrderRule2}]+) ),  
     name: "CompositeSet1",
     priority:10,
  	 result: CompositeSet1($$1.text)
  }
  
    // the 1st Sunday  of every month
 
   { pattern: ( ([{ner:DayOfWeekOrderRule2}]+) /.f/? (/every/|/each/) /month/ ),  
     name: "CompositeSet1",
     priority:10,
  	 result: CompositeSet1($$1.text)
  }
  

   ############SET##################
  
    // every Friday night, Wed morning
 
   { pattern: (/every/ ([{ner:CompositeDayOfWeekTimeOfDay}]+) ),  
     name: "CompositeDayOfWeekTimeOfDay",
     priority:10,
  	 result: CompositeSet2($$1.text)
  }
  
    // every Sunday 
 
   { pattern: ( /every/ ([{ner:DayOfWeekRule1}]+) ),  
     name: "CompositeDayOfWeekTimeOfDay",
     priority:10,
  	 result: CompositeSet2($$1.text)
  }
  
    // every Sunday at 4
 
   { pattern: ( /every/ ([{ner:CDayOfWeekTimeOfDay1}]+) ),  
     name: "CompositeDayOfWeekTimeOfDay",
     priority:10,
  	 result: CompositeSet2($$1.text)
  }
  

  ############FILTERS##################
   
   ENV.defaults["stage"] = 4
  
  // the sun
  
  {  ruleType: "text", 
     priority:0,
     pattern: /\b(the sun)\b/, 
     result: BetweenTimeEvent("") 
  }
  
    // the sun
  
  {  ruleType: "text", 
     priority:0,
     pattern: /\b(sun storm)\b/, 
     result: BetweenTimeEvent("") 
  }
  
  // fall from
  
  {  ruleType: "text", 
     priority:0,
     pattern: /\b(fall from)\b/, 
     result: BetweenTimeEvent("") 
  }
  
   
  //filter the Sun
  
  { ruleType: "filter", 
    pattern: ( /the/ [ { word:/sun/ }] )  

  }
  
    { ruleType: "filter", 
    pattern: ( /sun/ [ { word:/storm/ }] )  

  }
  
    //filter march of protest
  
  { ruleType: "filter", 
    pattern: ( /march/ /of/ /protest/ )  

  }
       
   // may fall
  
  { ruleType: "filter", 
    pattern: ( /may/ [ { word:/fall/ }] )  

  }
  
    // fall from
  
  { ruleType: "filter", 
    pattern: ( /fall/ [ { word:/from/ }] )  

  }
  
   // may be
  
  { ruleType: "filter", 
    pattern: ( /may/ [ { word:/be/ }] )  

  }
     
  