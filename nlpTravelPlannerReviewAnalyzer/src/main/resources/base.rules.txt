// LOCALE EN_US

YearRule =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.YearRule" }
MonthOfYear1 =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.MonthOfYear1" }
MonthAndYearRule1 =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.MonthAndYearRule1" }
MonthAndDayRule1 =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.MonthAndDayRule1" }
MonthAndDayRule2 =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.MonthAndDayRule2" }
DayOfWeekRule1 =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.DayOfWeekRule1" }
MonthAndDayRule3 =  { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.MonthAndDayRule3" }
MonthAndDayRule4 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.MonthAndDayRule4" }
DayOfWeekRule2 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.DayOfWeekRule2" }
DayOfWeekOrderRule1 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.DayOfWeekOrderRule1" }
DayOfWeekOrderRule2 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.DayOfWeekOrderRule2" }
DayOrderAndMonthRule1 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.DayOrderAndMonthRule1" }
MonthAndDayRule0 = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.date.MonthAndDayRule0" }
Time1Rule = { type: "CLASS", value: "com.codeminders.labs.timeextractor.rules.time.Time1Rule" }

// month of the year, ex. October 
  
   { ruleType: "text", 
    priority:0,
    pattern: /\b($MONTH_OF_YEAR)([.,;\s]|$)/,
  	result: MonthOfYear1($1) 
  }
  
  // year, ex. 2014 
  
   { ruleType: "text", 
    priority:0,
    pattern: /\b([2][0]\d\d)\b(\s|[.;,]|$)/,
  	result: YearRule($1) 
  }
  
   // October 2012  or Oct. 2012
  
   { ruleType: "text", 
    priority:1,
    pattern: /\b($MONTH_OF_YEAR|$MONTH_OF_YEAR_EASY)[.,;]?[\s]*([2][0]\d\d)\b/,
  	result: MonthAndYearRule1($1,$2) 
  }
  
    // July 14 2014, July 14
  
   { ruleType: "text", 
    priority:2,
    pattern: /\b($MONTH_OF_YEAR|$MONTH_OF_YEAR_EASY)[\s]*([,][\s]*)?(\b([1-2][0-9])\b|\b([3][0-1])\b|\b([1-9])\b)[\s]*([,]?[\s]*([\s]*\b[2][0-9]\d\d\b))?/,
  	result: MonthAndDayRule0($1, $3, $8) 
  }
  
  // July the 14th 2014, July 14 2014, July 14
  
   { ruleType: "text", 
    priority:3,
    pattern: /\b($MONTH_OF_YEAR|$MONTH_OF_YEAR_EASY)[\s]*[,]?[\s]*(the[\s]*)?\b(([1-2][0-9])|([3][0-1])|([1-9]))(th|st|nd)[\s]*[,]?(of)?[\s]*([\s]*([2][0-9]\d\d))?/,
  	result: MonthAndDayRule1($1,$3,$9) 
  }
  
   // 14th July 2012
  
   { ruleType: "text", 
    priority:1,
    pattern: /\b(([1-2][0-9])|([3][0-1])|([1-9]))(th|st|nd)?[\s]*(of|[,])?[\s]*($MONTH_OF_YEAR|$MONTH_OF_YEAR_EASY)[,]?([\s]*(of|[,])?[\s]*([2][0-9]\d\d))?\b/,
  	result: MonthAndDayRule2($1,$7,$10) 
  }
  
    // day of week, ex. Sunday, 
  
   { ruleType: "text", 
    priority:1,
    pattern: /\b($DAY_OF_WEEK)[s]?\b/,
  	result: DayOfWeekRule1($0) 
  	
  }
  
   // day of week, ex. Sunday 16, 
  
   { ruleType: "text", 
    priority:2,
    pattern: /\b($DAY_OF_WEEK)[s]?[\s]*(\b[1-2][0-9]\b|\b[3][0-1]\b|\b[1-9]\b)\b([\s,]|$)/,
  	result: DayOfWeekRule2($1,$2) 
  }
  
    //Wed
  
   { ruleType: "text", 
    priority:0,
    pattern: /\b($DAYOFWEEK_EASY)[s]?\b/,
  	result: DayOfWeekRule1($0) 
  }
  
   // the 20th of january 2014
  
   { ruleType: "text", 
    priority:2,
    pattern: /\b(the)[\s]*([1-9]|[1-2][0-9]|[3][0-1])(th|st|nd)[\s]*(of[\s]*)?($MONTH_OF_YEAR|$MONTH_OF_YEAR_EASY)[\s]*([2][0-9]\d\d)?\b/,
  	result: MonthAndDayRule3($2,$5,$6) 
  }
  
     // jan. 21 2014
  
   { ruleType: "text", 
    priority:0,
    pattern: /\b($MONTH_OF_YEAR_EASY)[.][\s]*([1-2][0-9]|[3][0-1]|[1-9])(th|st|nd)?[\s]*[,]?([\s]*(\b[2][0-9]\d\d\b))?\b/,
  	result: MonthAndDayRule4($1,$2,$4) 
  }
  
  
    // the first Tuesday (of the month)
  
   { ruleType: "text", 
    priority:3,
    pattern: /(the)?[\s]*($BasicOrdTerm)[\s]*(of)?[\s]*($DAY_OF_WEEK)[s]?[\s]*((of)[\s]*(the[\s]*)?(month))?/,
  	result: DayOfWeekOrderRule1($2,$4) 
  }
  
    // the 1st Tuesday (of the month)
  
   { ruleType: "text", 
    priority:3,
    pattern: /([^$-]|^)\b(([1-2][0-9]|[3][0-1]|[1-9]))(th|st|nd)?[\s]*(of)?[\s]*($DAY_OF_WEEK)[s]?[\s]*((of)[\s]*(the[\s]*)?(month))?\b/,
  	result: DayOfWeekOrderRule2($0) 
  }
  
  // the second of December
  
   { ruleType: "text", 
    priority:0,
    pattern: /\b(the[\s]*)?($BasicOrdTerm)[\s]*(of[\s]*)?($MONTH_OF_YEAR)[\s]*[,;]?[\s]*(\b[2][0-9]\d\d\b)?\b/,
  	result: DayOrderAndMonthRule1($2,$4,$5) 
  }
   
   // time of day, ex. midnight (time interval)
  
   { ruleType: "text", 
    priority:0,
    pattern: /\b(this[\s]*)?($TIME_OF_DAY)[s]?\b/,
  	result: BetweenTimeEvent($0) 
  }
  
   // season, ex. winter (date interval)
  
   { ruleType: "text", 
    priority:0,
    pattern: /\b($SEASON)\b/,
  	result: BetweenTimeEvent($0) 
  }
  
  
   // Tuesday - Sunday, Wed.-Fri.
   
  {  ruleType: "text", 
 	 priority:4,
     pattern: /\b(($DAY_OF_WEEK)[\s]*[-][\s]*($DAY_OF_WEEK))\b/,
  	 result: BetweenTimeEvent($0) 
  }
  
  // friday nights, etc.
  
  { ruleType: "text", 
    priority:1,
    pattern: /\b($DAY_OF_WEEK)[s]?[\s]*($TIME_OF_DAY)[s]?\b/,
  	result: BetweenTimeEvent($0) 
  }
      
   // October 3-4, 2012; October 3-4
  
   { ruleType: "text", 
    priority:2,
    pattern: /\b(($MONTH_OF_YEAR)[\s]*(\b([1-9]|[1-2][0-9]|[3][0-1])\b))[-](\b([1-9]|[1-2][0-9]|[3][0-1])[.,;][\s]*([2][0-9]\d\d)?\b)/,
  	result: BetweenTimeEvent($0) 
  }
  
   // 7pm (time, exact)
  
  { ruleType: "text", 
 	priority:0,
    pattern:  /\b(([0-9]|0[0-9]|1[0-9]|2[0-3])[\s]*(([p,P][.]?[m,M])|([a,A][.]?[m,M])))\b/,
    result: Time1Rule($2,$3) 
  }
  
   // yearly, weekly, daily
  
   { ruleType: "text", 
    priority:0,
    pattern: /\b(yearly|weekly|daily)\b/,
  	result: BetweenTimeEvent($0) 
  }
  
  // today, yesterday
  
   { ruleType: "text", 
    priority:0,
    pattern: /\b(today|yesterday)\b/,
  	result: BetweenTimeEvent($0) 
  }
  
  // every,each
  
   { ruleType: "text", 
    priority:0,
    pattern: /\b(every|each)\b/,
  	result: BetweenTimeEvent($0) 
  }
  
   // hh:mm CET?
  
   { ruleType: "text", 
    priority:0,
    pattern: /\b(([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])([\s]*($TimeZone))?\b/,
  	result: BetweenTimeEvent($0) 
  }
  