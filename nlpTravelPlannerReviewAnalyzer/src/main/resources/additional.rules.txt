CustomTimeEvent = { type: "CLASS", value: "com.codeminders.labs.timeextractor.sutime.CustomTimeEvent" }
AtTimeEvent = { type: "CLASS", value: "com.codeminders.labs.timeextractor.sutime.AtTimeEvent" }

BetweenTimeEvent = { type: "CLASS", value: "com.codeminders.labs.timeextractor.sutime.BetweenTimeEvent" }
 
   TIME_OF_DAY_MAP = {
    "morning": "morning",
    "afternoon": "afternoon",
    "evening": "evening",
    "night":" night",
    "noon": "noon",
    "midnight": "midnight"
  }
$TIME_OF_DAY = CreateRegex(Keys(TIME_OF_DAY_MAP))
  
DAYOFWEEK_MAP = {
   "monday": "monday",
    "tuesday": "tuesday",
    "wednesday": "wednesday",
    "thursday":" thursday",
    "friday":" friday",  
    "saturday": "saturday",
    "sunday": "sunday"
  }
       
  DAYOFWEEK_MAP_EASY = {
   "Sun": "Sunday",
   "Mon": "monday",
   "Tue": "tuesday",
   "Wed":" wednesday",
   "Thu":" thursday",
   "Thur":" thursday",  
   "Fri": "friday",
   "Sat": "saturday"
  }
  
MONTH_OF_YEAR_MAP = {
   "january": "january",
    "febr?y": "february",
    "march": "march",
    "april":" april",
    "may":" may",  
    "june": "june",
    "july": "july",
    "august": "august",
    "september": "september",
    "october": "october",
    "november": "november",
    "december": "december"
  }
    
  MONTH_OF_YEAR_EASY_MAP = {
   "jan": "jan",
    "feb": "feb",
    "mar": "mar",
    "apr":" apr",
    "may":" may",  
    "jun": "jun",
    "jul": "jul",
    "aug": "aug",
    "sept": "sept",
    "oct": "oct",
    "nov": "nov",
    "dec": "dec"
  }
  
    BASIC_ORDINAL_MAP = {
    "first": 1,
    "second": 2,
    "third": 3,
    "fourth": 4,
    "fifth": 5,
    "sixth": 6,
    "seventh": 7,
    "eighth": 8,
    "ninth": 9,
    "tenth": 10,
    "eleventh": 11,
    "twelfth": 12,
    "thirteenth": 13,
    "fourteenth": 14,
    "fifteenth": 15,
    "sixteenth": 16,
    "seventeenth": 17,
    "eighteenth": 18,
    "nineteenth": 19,
    "twentieth": 20,
    "thirtieth": 30,
    "fortieth": 40,
    "fiftieth": 50,
    "sixtieth": 60,
    "seventieth": 70,
    "eightieth": 80,
    "ninetieth": 90,
    "hundredth": 100
  }
   
TIME_ZONE = {
    "PST": "PST",
    "EST": "EST",
    "EDT": "EDT",
    "CST":" CST",
    "PDT":" PDT",  
    "GMT": "GMT",
    "UTC": "UTC"
  }  
  
  TIME_OF_YEAR_MAP = {
  
    "winter": "winter",
    "summer": "summer",
    "autumn": "summer",
    "spring":" spring"
  } 
    
$BasicOrdTerm = CreateRegex(Keys(BASIC_ORDINAL_MAP))
$TimeZone = CreateRegex(Keys(TIME_ZONE))
  
$DAY_OF_WEEK = CreateRegex(Keys(DAYOFWEEK_MAP))  
$MONTH_OF_YEAR = CreateRegex(Keys(MONTH_OF_YEAR_MAP))
$DAYOFWEEK_EASY = CreateRegex(Keys(DAYOFWEEK_MAP_EASY))
$MONTH_OF_YEAR_EASY=CreateRegex(Keys(MONTH_OF_YEAR_EASY_MAP))
$SEASON=CreateRegex(Keys(TIME_OF_YEAR_MAP))

$PM_AM_TIME = "[0-9][\s]?([p,P]?[m,M])?(|[a,A][m,M])?[\s-]?([0-9][\s]?([p,P]?[m,M])?(|[a,A][m,M])?)?"
 
  // first monday of month 
  
  { ruleType: "text", pattern: /(($BasicOrdTerm|[1-9](rd|th))([\s])?($DAY_OF_WEEK|$DAYOFWEEK_EASY)[\s]?(of)[\s]?(the)?[\s]?(month))/,
  	 result: BetweenTimeEvent($0) 
  }
  
  { ruleType: "text", pattern: /($SEASON)[\s]*(months|month)/,
  	 result: BetweenTimeEvent($0) 
  }
 
  
   // Sat/Sun
  { ruleType: "text", pattern: /(($DAYOFWEEK_EASY)[\/]($DAYOFWEEK_EASY))/,
  	 result: BetweenTimeEvent($0) 
  }
  
   // Sunday 17 of July
  
  { ruleType: "text", 
    pattern: /(($DAY_OF_WEEK)[\s]*((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))[\s]?((of)(the)?[\s]?($MONTH_OF_YEAR)))/,
  	 result: BetweenTimeEvent($0) 
  }
  
   // Tuesday - Sunday, Wed.-Fri.
   
  { ruleType: "text", 
    pattern: /(($DAY_OF_WEEK)[\s]*[-][\s]*($DAY_OF_WEEK))/,
  	 result: BetweenTimeEvent($0) 
  }
  

      
  { ruleType: "text", 
    pattern: /(($DAYOFWEEK_EASY)[.]?[\s]*[-][\s]*($DAYOFWEEK_EASY)[.]?)/,
  	 result: BetweenTimeEvent($0) 
  }
  
  // between morning and evening
  // between morning and 12h
  
  {
   ruleType: "text",
   pattern: /(between)[\s*]($TIME_OF_DAY|$DAY_OF_WEEK|([0-9][\s]?([p,P]?[m,M])|([a,A][m,M])?[\s-]?(to)?([0-9][\s]?([p,P]?[m,M])?(|[a,A][m,M])?)?))[\s*](and)[\s*]($TIME_OF_DAY|$DAY_OF_WEEK|([0-9][\s]?([p,P]?[m,M])?(|[a,A][m,M])?[\s-]?([0-9][\s]?([p,P]?[m,M])?(|[a,A][m,M])?)?))/ ,
   result: CustomTimeEvent($0)
  }
  
 // between 11:30 and 12h
 // between 11:30 and 12:00
 // between 11h and 14h
 
 {
   ruleType: "text",
   pattern: /(between)(([\s*]([01]?[0-9]|2[0-3])[:.,][0-5][0-9])|([\s*][0-2][0-9][\s]?h?))[\s]*(([p,P][.]?[m,M][.]?)|([a,A][.]?[m,M][.]?))?[\s]*(and)(([\s*]([01]?[0-9]|2[0-3])[:.,][0-5][0-9])|([\s*][0-2][0-9][\s]?h?))[\s]*(([p,P][.]?[m,M][.]?)|([a,A][.]?[m,M][.]?))?/ ,
   result: BetweenTimeEvent($0)
  }
  
 // from 21 to 24 July 2014 etc. 
  {  ruleType: "text", 
     priority:3,
     pattern: /(from)?[\s]?((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))[\s]*((to)|[-])[\s]*((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))[\s]*($MONTH_OF_YEAR)[\s,.]*((19|20)\d\d)?/, 
     result: BetweenTimeEvent($0) 
   }

   
  //11:30-12:30, 11.30 am-12.30 pm, 
  {
   ruleType: "text",
   priority:5,
   pattern: /\b(([01]?[0-9]|2[0-3]|1[0-9])([:.,][0-5][0-9])?)[\s]*(([p,P][.]?[m,M]?)|([a,A][.]?[m,M]?[.]?))?[\s]*[-][\s]*(([01]?[0-9]|2[0-3]|1[0-9])([:.,][0-5][0-9])?)[\s]*(([p,P][.]?[m,M]?)|([a,A][.]?[m,M]?))?\b/ ,
   result: BetweenTimeEvent($0)
  }
 
   // till 09/13/2013 till 09.13.2013
   {
   ruleType: "text",
   priority:10,
   pattern: /(((until|till|til|before)[\s]*((0[1-9]|[12][0-9]|3[01])[.\/](0[1-9]|1[012])[.\/](19|20)?\d\d)))/ ,
   result: BetweenTimeEvent($0) 
  }
  
   // till 09/13/2013 till 09.13.2013
   {
   ruleType: "text",
   priority:10,
   pattern: /(((until|till|til|before)[\s]*((0[1-9]|1[012])[.\/](0[1-9]|[12][0-9]|3[01])[.\/](19|20)?\d\d)))/ ,
   result: BetweenTimeEvent($0) 
  }
  
   //at 10.11pm
   {
   ruleType: "text",
   priority:1,
   pattern: /\b(at about|at|until|till|til|before|after|by|up to)[\s]*\b(([01]?[0-9]|2[0-3])[\s]*([.|:][0-5][0-9])?)[\s]*(([p,P][.]?[m,M])|([a,A][.]?[m,M]))?\b[\s]*($TimeZone)?/ ,
   result: AtTimeEvent($1,$2,$5,$8) 
  }
  
   //11.30 am/pm
 
   {
   ruleType: "text",
   priority:1,
   pattern: /(([01]?[0-9]|2[0-3]).([0-5][0-9]))[\s]*(([p,P][.]?[m,M])|([a,A][.]?[m,M]))/ ,
   result: BetweenTimeEvent($0) 
  }
    
  //any_word 10.11
   
   {
   ruleType: "text",
   priority:0,
   pattern: /\b(\w*[\s]?(([01]?[0-9]|2[0-3])[.][0-5][0-9]))\b/ ,
   result: CustomTimeEvent($0) 
  }

 
   // from time to time
   {
   ruleType: "text",
   pattern: /(from)?[\s]*(([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])[\s]?(([p,P][.]?[m,M]?)|([a,A][.]?[m,M]?))?[\s]*(to|till|until|before)[\s]*(([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])[\s]?(([p,P][.]?[m,M]?)|([a,A][.]?[m,M]?))?/ ,
   result: BetweenTimeEvent($0)
   }

  // until 7 July
  
  { ruleType: "text", 
 	 priority:10,
    pattern: /(til|till|until|before)[\s]*\b(((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))[\s]*($MONTH_OF_YEAR))/,
    result: BetweenTimeEvent($0) 
  }
      
  
 // weekday week day  	  	
 {
   ruleType: "text", 
   pattern: /(week days|weekdays|weekday|week day)/,
   result: CustomTimeEvent("DATE") 
  }
  
  // weekend, week-end, weekends, week-ends  	
 {
   ruleType: "text",
   pattern: /(weekends|week-ends)/,
   result: CustomTimeEvent("Week-ends") 
  }
  
 // lunch time
  
 {
   ruleType: "text",
   pattern: /(lunch time)/,
   result: CustomTimeEvent("TIME") 
  }
  
  // after lunch
   {
   ruleType: "text",
   pattern: /(after l?ch)/,
   result: CustomTimeEvent("TIME") 
  }
  
 //every 
  {
   ruleType: "text",
   pattern: /everyday|everymonth|everyyear|every year|every day|every month|each month|each day|each year/ ,
   result: CustomTimeEvent("EVERY") 
  }
  
   //for one year from the date
  {
   ruleType: "text",
   pattern: /for one year from the date/ ,
   result: CustomTimeEvent("for one year from the date") 
  }


  { ruleType: "text", pattern: /(whole|all|entire|full)[\s]? (day|month|year)/,
  	 result: CustomTimeEvent("whole")  
  }
  
    //through/thru month
       
   { 
    ruleType: "text",
	pattern: /(through|thru)[\s]($MONTH_OF_YEAR|$MONTH_OF_YEAR_EASY[.]?)([\s]?)([0-3][0-1][-][0-3][0-1])?[\s]?(^\d{4})?[\s]?/,
	result: CustomTimeEvent("THROUGH TIME") 
  }
   
    //through/thru month
      
   { 
    ruleType: "text",
	pattern: /(through|thru)[\s]($MONTH_OF_YEAR)([\s]?)(\b0?[1-9]\b|\b[12][0-9]\b|\b3[01]\b)?/,
	result: CustomTimeEvent("THROUGH TIME") 
  }
	  
	//mid or mid-late month
	
	{ 
    ruleType: "text",  
    priority: 1,
	pattern: /(mid|mid-late)[-\s]?($MONTH_OF_YEAR)/ ,
	result: CustomTimeEvent("SET") 
	}
	 

  // july 25 - june 26
  {
   ruleType: "text",
   pattern: /($MONTH_OF_YEAR)[\s]?[0-3][0-9][\s]*[-]*[\s]*($MONTH_OF_YEAR)[\s]?[0-3][0-9]?/,
   result: CustomTimeEvent("PERIOD_TIME") 
  }
  
    //dd/mm/yyyy 
   // 13/03/2014
   // 13.03.2014
  
  { ruleType: "text", pattern: /(0[1-9]|[12][0-9]|3[01])[-.\/](0[1-9]|1[012])[-.\/](19|20)\d\d/,
   result: CustomTimeEvent("date")  } 
   
    //dd/mm/yyyy 
   // 13/03/12
   // 13.03.12
  
  { ruleType: "text", pattern: /(0[1-9]|[12][0-9]|3[01])[-.\/](0[1-9]|1[012])[-.\/]\d\d/,
   result: CustomTimeEvent("date")  } 
   
  { ruleType: "text", pattern: /(^|[\s])[\d][\s]?weeks($|[\s])/,
   result: CustomTimeEvent("Weeks")  }
   
  
  // summer hours 
  { ruleType: "text", pattern: /summer[\s]?(hours|hour)/,
   result: CustomTimeEvent("Summer")  }
   

  { ruleType: "text", pattern: /(all|entire|full)[\s]? (day|month|year)/,
  	 result: CustomTimeEvent("whole")  
  }
  
  { ruleType: "text", pattern: /most of the year/,
  	 result: CustomTimeEvent("most of the year")  
  }
  
  { ruleType: "text", pattern: /this time of the year/,
  	 result: CustomTimeEvent("this time of the year")  
  }
  
  { ruleType: "text", pattern: /once a (month|year|day)/,
  	 result: CustomTimeEvent("this time of the year")  
  }
    
  // past 7 years 
  
  { ruleType: "text", pattern: /past[\s]?\b[\d]\b[\s]?years/,
  	 result: BetweenTimeEvent($0) 
  }
  
  // Fri, 6/27
  
  { ruleType: "text", pattern: /($DAYOFWEEK_EASY)[,][\s]*((\b[1-9]\b)|(\b[1][0-2]\b))\/((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))/,
  	 result: BetweenTimeEvent($0) 
  }
  
   // 1-2 hours
  
  { ruleType: "text", pattern: /(\b[1-9](([-,-][1-9][\s]*)|[0-9])?(hours|hrs)\b)/,
  	 result: BetweenTimeEvent($0) 
  }
  
  // 1-21 July 2014 etc.
  { ruleType: "text", pattern: /((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))[-]((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))[\s]*($MONTH_OF_YEAR)[\s]*((19|20)\d\d)?/,
  	 result: BetweenTimeEvent($0) 
  }
  
    // June 24-29 July 2014 etc.
  { ruleType: "text", pattern: /($MONTH_OF_YEAR)[\s]*((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))[-]((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))[\s]*((19|20)\d\d)?/,
  	 result: BetweenTimeEvent($0) 
  }
  
   // 30-45 minutes, 2 mns
	{ 
    ruleType: "text",
	pattern: /\b(([1-9])|([1-9][0-9]))(([\s]*[-][\s]*(([1-9])|([1-9][0-9][0-9]?)))?[\s]?)?(minutes|minute|mins|min|mns|mn)\b/,
	result: CustomTimeEvent("PERIOD_TIME") 
    }
    
   // half hour, quarter hour
	{ 
    ruleType: "text",
	pattern: /\b((half|quarter)[\s]*(hour))\b/,
	result: CustomTimeEvent("PERIOD_TIME") 
    }
    
   // long hours
  
  { ruleType: "text", pattern: /long hours/,
  	 result: CustomTimeEvent("long hours")  
  }
  
    // morning/evening hours
  
  { ruleType: "text", pattern: /(morning|evening) hours/,
  	 result: CustomTimeEvent("morning/evening hours")  
  }
  
  //holidays New Years' Eve
  
  { ruleType: "text", pattern: /(New Years' Eve|New Year's)/,
  	 result: CustomTimeEvent("New Years' Eve")  
  }
  
  //holidays St Valentine's Day
  
  { ruleType: "text", pattern: /St[.]?[\s]*Valentine's[\s]*Day/,
  	 result: CustomTimeEvent("St Valentine's Day")  
  }
  
  // 14h00 
  {  ruleType: "text", 
     pattern: /(((([0]?[1-9])|([1][1-9]|[2][0-3]))\b(hours|h))[0-5][0-9])/, 
     result: CustomTimeEvent("PERIOD_TIME") 
  }
 
  // filter lovely days, sunny days, windy days, Family Days, etc. 
  