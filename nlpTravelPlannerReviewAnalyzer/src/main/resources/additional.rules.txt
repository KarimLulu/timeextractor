   //during Spring and Fall (date period (list))
  
   { ruleType: "text", 
    priority:1,
    pattern: /\b(during)[\s]*(SPRING|SUMMER|FALL|WINTER)[\s]*(and)[\s]*(SPRING|SUMMER|FALL|WINTER)\b/,
  	result: BetweenTimeEvent($0) 
  }
    
  // date period 
  // Sat/Sun
  { ruleType: "text", pattern: /(($DAYOFWEEK_EASY)\/($DAYOFWEEK_EASY))/,
    priority:3,
  	result: BetweenTimeEvent($0) 
  }
  
 
  //Wed.-Fri. (date period )
  
  { ruleType: "text", 
    priority:3,
    pattern: /(($DAYOFWEEK_EASY)[.]?[\s]*[-][\s]*($DAYOFWEEK_EASY)[.]?)/,
  	 result: BetweenTimeEvent($0) 
  }
  
   // Tuesday-Sunday 11-18 (date +time period)
   
  {  ruleType: "text", 
 	 priority:5,
     pattern: /\b(($DAY_OF_WEEK)[\s]*[-][\s]*($DAY_OF_WEEK))[\s]*(([1-9]|[1-2][0-9]|[3][0-1]))[-](([1-9]|[1-2][0-9]|[3][0-1]))\b/,
  	 result: BetweenTimeEvent($0) 
  }
  
  
  // between morning and evening
  // between morning and 12h
  
  {
   ruleType: "text",
   pattern: /(between)[\s*]($TIME_OF_DAY|$DAY_OF_WEEK|([0-9][\s]?([p,P]?[m,M])|([a,A][m,M])?[\s-]?(to)?([0-9][\s]?([p,P]?[m,M])?(|[a,A][m,M])?)?))[\s*](and)[\s*]($TIME_OF_DAY|$DAY_OF_WEEK|([0-9][\s]?([p,P]?[m,M])?(|[a,A][m,M])?[\s-]?([0-9][\s]?([p,P]?[m,M])?(|[a,A][m,M])?)?))/ ,
   result: BetweenTimeEvent($0)
  }
   
 // between 11:30 and 12h
 // between 11:30 and 12:00
 // between 11h and 14h
 
 {
   ruleType: "text",
   pattern: /(between)(([\s*]([01]?[0-9]|2[0-3])[:.,][0-5][0-9])|([\s*][0-2][0-9][\s]?h?))[\s]*(([p,P][.]?[m,M][.]?)|([a,A][.]?[m,M][.]?))?[\s]*(and)(([\s*]([01]?[0-9]|2[0-3])[:.,][0-5][0-9])|([\s*][0-2][0-9][\s]?h?))[\s]*(([p,P][.]?[m,M][.]?)|([a,A][.]?[m,M][.]?))?/ ,
   result: BetweenTimeEvent($0)
  }
  
 // from 21 to 24 July 2014 etc. 
  {  ruleType: "text", 
     priority:3,
     pattern: /(from)?[\s]?((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))[\s]*((to)|[-])[\s]*((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))[\s]*($MONTH_OF_YEAR)[\s,.]*((19|20)\d\d)?/, 
     result: BetweenTimeEvent($0) 
   }
   
  // from 9th February -5th June 2012 
  
  {  ruleType: "text", 
     priority:3,
     pattern: /\b(from)[\s]*(([1-9])|([1-2][0-9])|([3][0-1]))(th)?[\s]*($MONTH_OF_YEAR)[\s]*([-]|(to)|(until))[\s]*(([1-9])|([1-2][0-9])|([3][0-1]))(th)?[\s]*($MONTH_OF_YEAR)[\s]*((19|20)\d\d)?\b/, 
     result: BetweenTimeEvent($0) 
   }
   
  
  // 11.30 am-12.30 pm, 
  {
   ruleType: "text",
   priority:5,
   pattern: /\b(([01]?[0-9]|2[0-3]|1[0-9])([:.,][0-5][0-9])?)[\s]*(([p,P][.]?[m,M]?[.]?)|([a,A][.]?[m,M]?[.]?))?[\s]*(-|to)[\s]*(([01]?[0-9]|2[0-3]|1[0-9])([:.,][0-5][0-9])?)[\s]*(([p,P][.]?[m,M][.]?)|([a,A][.]?[m,M][.]?))/ ,
   result: BetweenTimeEvent($0)
  }
  
  //11:30-12:30, 11.30 am-12.30 pm, 
  {
   ruleType: "text",
   priority:6,
   pattern: /\b(from[\s]*)?(2[0-3]|1[0-9]|([01]?[0-9]))(([:.,][0-5][0-9])?)[\s]*(-|to)[\s]*(2[0-3]|1[0-9]|([01]?[0-9]))([:.,][0-5][0-9])[\s]*(([p,P][.]?[m,M]?)|([a,A][.]?[m,M]?))?\b/ ,
   result: BetweenTimeEvent($0)
  }
 
   // till 09/13/2013, till 09.13.2013
   {
   ruleType: "text",
   priority:10,
   pattern: /(((until|till|til|before)[\s]*((0[1-9]|[12][0-9]|3[01])[.\/](0[1-9]|1[012])[.\/](19|20)?\d\d)))/ ,
   result: BetweenTimeEvent($0) 
  }
  
   // till 09/13/2013, till 09.13.2013
   {
   ruleType: "text",
   priority:10,
   pattern: /(((until|till|til|before)[\s]*((0[1-9]|1[012])[.\/](0[1-9]|[12][0-9]|3[01])[.\/](19|20)?\d\d)))/ ,
   result: BetweenTimeEvent($0) 
  }
  
   //by 21.11CET
   {
   ruleType: "text",
   priority:3,
   pattern: /(\b(at about|at|until|till|til|before|after|by|up to)[\s]*\b((2[0-3]|[01]?[0-9])[\s]*[.|:]([0-5][0-9]|oo)\b)[\s]*($TimeZone)?)/ ,
   result: BetweenTimeEvent($0)  
  }
  
   // three days, three nights
   {
   ruleType: "text",
   priority:1,
   pattern: /\b(($BasicNumTerm)[\s]*(days|nights|night|day))\b/ ,
   result: BetweenTimeEvent($0) 
  }
  
   // 3 days
   {
   ruleType: "text",
   priority:1,
   pattern: /\b(\d[\s]*(days))\b/ ,
   result: BetweenTimeEvent($0) 
  }
    

    
  //any_word 10.11
   
   {
   ruleType: "text",
   priority:0,
   pattern: /\b(([a-zA-Z]+[\s]*(([01]?[0-9])|(2[0-3]))[.]([0-5][0-9]))[\s])/ ,
   result: BetweenTimeEvent($0) 
  }

 // 7/8:30
 
   {
   ruleType: "text",
   priority:1,
   pattern: /\b[1-9][\/](([0-9]|0[0-9]|1[0-9]|2[0-3])[:.][0-5][0-9])\b/ ,
   result: BetweenTimeEvent($0)
   }
    
   // from time to time
   {
   ruleType: "text",
   priority:5,
   pattern: /(from)?[\s]*(([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])[\s]?(([p,P][.]?[m,M]?)|([a,A][.]?[m,M]?))?[\s]*(to|till|until|before)[\s]*(([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])[\s]?(([p,P][.]?[m,M]?)|([a,A][.]?[m,M]?))?/ ,
   result: BetweenTimeEvent($0)
   }
   
    // from 10:00 to 11:00
   {
   ruleType: "text",
   priority:2,
   pattern:/(from)?[\s]*([0-9]|0[0-9]|1[0-9]|2[0-3])[:.][0-5][0-9][\s]*(to|till|until|before)[\s]*([0-9]|0[0-9]|1[0-9]|2[0-3])[:.][0-5][0-9]/,
   result: BetweenTimeEvent($0)
   }
   
   // 9am till 6pm
   
   {
   ruleType: "text",
   priority:3,
   pattern: /(([0-9]|0[0-9]|1[0-9]|2[0-3]))[\s]?(([p,P][.]?[m,M]?)|([a,A][.]?[m,M]?))?[\s]*(to|till|until|before)[\s]*(([0-9]|0[0-9]|1[0-9]|2[0-3]))[\s]?(([p,P][.]?[m,M]?)|([a,A][.]?[m,M]?))/ ,
   result: BetweenTimeEvent($0)
   }
       
  
 // weekday week day  	  	
 {
   ruleType: "text", 
   pattern: /\b(week days|weekdays|weekday|week day)\b/,
   result: BetweenTimeEvent("DATE") 
  }
  
  // weekend, week-end, weekends, week-ends  	
 {
   ruleType: "text",
   pattern: /\b(weekends|week-ends)\b/,
   result: BetweenTimeEvent("Week-ends") 
  }
  
 // lunch time
  
 {
   ruleType: "text",
   pattern: /\b(lunch time)\b/,
   result: BetweenTimeEvent("TIME") 
  }
  
  // after lunch
   {
   ruleType: "text",
   pattern: /(after l?ch)/,
   result: BetweenTimeEvent("TIME") 
  }
  
 //every 
  {
   ruleType: "text",
   pattern: /\b(everyday|everymonth|everyyear|every year|every day|every month|each month|each day|each year|everyweek|every week)\b/ ,
   result: EveryTimeEvent($0) 
  }
  
   //for one year from the date
  {
   ruleType: "text",
   pattern: /for one year from the date/ ,
   result: BetweenTimeEvent("for one year from the date") 
  }


  { ruleType: "text", pattern: /(whole|all|entire|full)[\s]? (day|month|year)/,
  	 result: BetweenTimeEvent("whole")  
  }
  
   //through/thru month
       
   { 
    ruleType: "text",
	pattern: /\b(through|thru)[\s]($MONTH_OF_YEAR|$MONTH_OF_YEAR_EASY[.]?)([\s]?)([0-3][0-1][-][0-3][0-1])?[\s]?((\d{4})?)\b/,
	result: BetweenTimeEvent("THROUGH TIME") 
  }
   
    //through/thru month
      
   { 
    ruleType: "text",
	pattern: /\b(through|thru)[\s]($MONTH_OF_YEAR)([\s]?)(\b0?[1-9]\b|\b[12][0-9]\b|\b3[01]\b)?\b/,
	result: BetweenTimeEvent("THROUGH TIME") 
  }
  
  	//April through October
	
	{ 
    ruleType: "text",  
    priority: 1,
	pattern: /($MONTH_OF_YEAR)[\s]*(through|thru)[\s]*($MONTH_OF_YEAR)/ ,
	result: BetweenTimeEvent("April through October") 
	}
	 
	 
   //Wed through Sun

	{ 
    ruleType: "text",  
    priority: 1,
	pattern: /\b($DAYOFWEEK_EASY)[\s]*(through|thru)[\s]*($DAYOFWEEK_EASY)\b/ ,
	result: BetweenTimeEvent("THROUGH TIME") 
	}
	 
	  
	//mid or mid-late month
	
	{ 
    ruleType: "text",  
    priority: 1,
	pattern: /(mid|mid-late)[-\s]?($MONTH_OF_YEAR)/ ,
	result: BetweenTimeEvent("SET") 
	}
	


  // july 25 - june 26
  {
   ruleType: "text",
   pattern: /($MONTH_OF_YEAR)[\s]?[0-3][0-9][\s]*[-]*[\s]*($MONTH_OF_YEAR)[\s]?[0-3][0-9]?/,
   result: BetweenTimeEvent("PERIOD_TIME") 
  }
    
  // 2009/04/10
  
  { ruleType: "text", 
  priority:4,
  pattern: /\b((19|20)\d\d)[-.\/]((0[1-9]|1[012]))[-.\/]((0[1-9]|[12][0-9]|3[01]))\b/,
  result: BetweenTimeEvent($0)  
  } 
   
  // 14/3/2011
  
  { ruleType: "text", 
  priority:3,
  pattern: /\b(([1-9]|[12][0-9]|3[01]))[-.\/](([1-9]|1[012]))[-.\/]((19|20)\d\d)\b/,
   result: BetweenTimeEvent("date")  
   }
   
   // 14/3/11
  
  { ruleType: "text", 
  priority:2,
  pattern: /\b(([1-9]|[12][0-9]|3[01]))[-.\/](([1-9]|1[012]))[-.\/](\d\d)\b/,
   result: BetweenTimeEvent($0)  
  }  
  
     //dd/mm/yyyy 
   // 13/03/12
   // 13.03.12
  
  { ruleType: "text", 
  pattern: /(0[1-9]|[12][0-9]|3[01])[-.\/](0[1-9]|1[012])[-.\/]\d\d/,
  priority:4,
   result: BetweenTimeEvent("date")  
   } 
   
      
  // 13/03/2014
   // 13.03.2014
  
  { ruleType: "text", 
  pattern: /\b((0[1-9]|[12][0-9]|3[01]))[-.\/]((0[1-9]|1[012]))[-.\/]((19|20)\d\d)\b/,
  priority:5,
   result: BetweenTimeEvent("date")  
   } 
   
  // 3/14/11
     
  { ruleType: "text", 
  pattern: /\b((in|on|by|until)[\s]*)?((1[012]|0?[1-9]))[-.\/]((3[01]|[12][0-9]|0[1-9]))[-.\/](((19|20)\d\d)|\d\d)\b/,
  priority:6,
  result: BetweenTimeEvent("date")  
  } 
 
  // 17/06
    
  {  ruleType: "text", 
     priority:0,
     pattern: /\b([0]?([1-9])|([1-2][0-9])|([3][0-1]))\/(([0][1-9])|[1][0-2])\b/, 
      result: BetweenTimeEvent("date")  
  }
  
  // 10/31
    
  {  ruleType: "text", 
     priority:0,
     pattern: /\b(([0][1-9])|[1][0-2])\/(([1-9])|([1-2][0-9])|([3][0-1]))\b/, 
     result: BetweenTimeEvent("PERIOD_TIME") 
  }
    
  // from 4/23/10 through 8/29/2010
  
 { ruleType: "text", 
  priority:4,
  pattern: /\b(from)[\s]*(([1-9]|1[012]))[-.\/](([1-9]|[12][0-9]|3[01]))[-.\/]((\d\d)|([12][90]\d\d))[\s]*(to|through|until)[\s]*(([1-9]|1[012]))[-.\/](([1-9]|[12][0-9]|3[01]))[-.\/]((\d\d)|([12][90]\d\d))\b/,
  result: BetweenTimeEvent($0)
  }  
   
      
  { ruleType: "text", pattern: /\b((\d|\d\d)[\s]?(weeks))\b/,
   result: BetweenTimeEvent("N Weeks")  }
   
  // summer hours 
  { ruleType: "text", pattern: /\b(summer)[\s]?(hours|hour)\b/,
   result: BetweenTimeEvent("Summer")  }
   
 // all day - duration
  { ruleType: "text", pattern: /(all|entire|full)[\s]? (day|month|year)/,
  	 result: BetweenTimeEvent("whole")  
  }
  
  
 // past 7 years 
  
  { ruleType: "text", pattern: /\b(past)[\s]?\b[\d]\b[\s]?(years)\b/,
  	 result: BetweenTimeEvent($0) 
  }
  
  // Fri, 6/27
  
  { ruleType: "text", pattern: /\b($DAYOFWEEK_EASY)[,][\s]*((\b[1-9]\b)|(\b[1][0-2]\b))\/((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))\b/,
  	 result: BetweenTimeEvent($0) 
  }
  
   // 1-2 hours
  
  { ruleType: "text",
    priority: 3,
    pattern: /(\b((\d)[\s]*[-][\s]*([0-9])[\s]*(hours|hrs))\b)/,
  	 result: BetweenTimeEvent($0) 
  }
  
  //3 hours, 2hrs
  
  { ruleType: "text", pattern: /((more than)[\s]*)?(((\d)(\d)?.(\d)|(\d)(\d)|(\d))[\s]*(hours|hour|hrs|hr)\b)/,
    priority:0,
  	 result: BetweenTimeEvent($0) 
  }
  
  // 1-21 July 2014 etc.
  { ruleType: "text", pattern: /((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))[-]((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))[\s]*($MONTH_OF_YEAR)[\s]*((19|20)\d\d)?/,
  	 result: BetweenTimeEvent($0) 
  }
  
   // June 24-29 July 2014 etc.
  { ruleType: "text", pattern: /($MONTH_OF_YEAR)[\s]*((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))[-]((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))[\s]*((19|20)\d\d)?/,
  	 result: BetweenTimeEvent($0) 
  }

  // half hour, quarter hour
	{ 
    ruleType: "text",
	pattern: /\b((half|quarter)[\s]*(hour))\b/,
	result: BetweenTimeEvent("PERIOD_TIME") 
    }
    
  // long hours
  
  { ruleType: "text", pattern: /long hours/,
  	 result: BetweenTimeEvent("long hours")  
  }
  
  // morning/evening hours
  
  { ruleType: "text", pattern: /(morning|evening) hours/,
  	 result: BetweenTimeEvent("morning/evening hours")  
  }
  
  //holidays New Years' Eve
  
  { ruleType: "text", pattern: /(\b(New Years' Eve)\b|\b(New Year)\b)/,
  	 result: BetweenTimeEvent("New Years' Eve")  
  }
  
  //holidays St Valentine's Day
  
  { ruleType: "text", 
    pattern: /St[.]?[\s]*Valentine's[\s]*Day/,
  	 result: BetweenTimeEvent("St Valentine's Day")  
  }
  
  
  // n days a week
  {  ruleType: "text", 
     pattern: /\b[1-7][\s]*(days a week)\b/, 
     result: BetweenTimeEvent("PERIOD_TIME") 
  }
   
  // 30-45 minutes, 2 mns
	{ 
    ruleType: "text",
    priority:0,
	pattern: /\b((the)[\s](($BasicOrdTerm))[\s]*)?(([1-9])|([1-9][0-9]))(([\s]*[-][\s]*(([1-9])|([1-9][0-9][0-9]?)))?[\s]?)?(minutes|minute|mins|min|mns|mn)\b/,
	result: BetweenTimeEvent("abc") 
    }
    
    // 30-45 minutes, 2 mns
	{ 
    ruleType: "text",
    priority:0,
	pattern: /\b((about|at about)[\s]*)?(([1-9])|([1-9][0-9]))(([\s]*[-][\s]*(([1-9])|([1-9][0-9][0-9]?)))?[\s]?)?(minutes|minute|mins|min|mns|mn)\b/,
	result: BetweenTimeEvent("abc") 
    }
    

  // at least n hours
    {  ruleType: "text", 
     priority: 3,
     pattern: /\b((at le.*st)[\s]*(($BasicNumTerm)|(\d\d?))[\s]*(hours|hour|hrs|hr|h))\b/, 
     result: BetweenTimeEvent("PERIOD_TIME") 
  }
  
    // more than an hour
    {  ruleType: "text", 
     priority: 1,
     pattern: /\b(more than an hour)\b/, 
     result: BetweenTimeEvent("PERIOD_TIME") 
  }
  
    // every hour
    
    {  ruleType: "text", 
     priority: 1,
     pattern: /\b(every hour)\b/, 
     result: BetweenTimeEvent("every hour") 
  }
  
    // last an hour
    {  ruleType: "text", 
     priority: 1,
     pattern: /\b((last)[\s]*($BasicNumTerm)?(an)?[\s]*(hours|hour|hrs|hr|h))\b/, 
     result: BetweenTimeEvent("PERIOD_TIME") 
  }
  
    // n hours
    {  ruleType: "text", 
     priority: 0,
     pattern: /\b($BasicNumTerm)[\s]*(hours|hour|hrs|hr|h)\b/, 
     result: BetweenTimeEvent("PERIOD_TIME") 
  }
  
   // Dec. 26-30
   
  {  ruleType: "text", 
     pattern: /\b(($MONTH_OF_YEAR_EASY)[.]?[\s]*((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))[-]((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b)))\b/, 
     result: BetweenTimeEvent("PERIOD_TIME") 
  }
  
   // October the 5th 2014
   
  {  ruleType: "text", 
     pattern: /($MONTH_OF_YEAR)[,]?[\s]*(the)?[\s]*(([1-9])|([1-2][0-9])|([3][0-1]))(th|d)?[\s]*((19|20)\d\d)\b/, 
     result: BetweenTimeEvent("PERIOD_TIME") 
  }
  
   // January,21,2013
   
  {  ruleType: "text", 
     priority:1,
     pattern: /($MONTH_OF_YEAR)[,][\s]*(([1-9])|([1-2][0-9])|([3][0-1]))[,][\s]*((19|20)\d\d)\b/, 
     result: BetweenTimeEvent("PERIOD_TIME") 
  }
  
    
   // Jan-2013
   
  {  ruleType: "text", 
     priority:1,
     pattern: /\b($MONTH_OF_YEAR_EASY)[-]((19|20)\d\d)\b/, 
     result: BetweenTimeEvent("PERIOD_TIME") 
  }
  
    // March the Fourteenth, 2011
   
  {  ruleType: "text", 
     priority:3,
     pattern: /\b($MONTH_OF_YEAR)[\s]*(the)[\s]*($BasicOrdTerm)[,][\s]*((19|20)\d\d)\b/, 
     result: BetweenTimeEvent("PERIOD_TIME") 
  }
  
  // two days 
  
  {  ruleType: "text", 
     priority:0,
     pattern: /\b($BasicNumTerm)[\s]*(days)\b/, 
     result: BetweenTimeEvent("PERIOD_TIME") 
  }
  
 // at 1200
  
  {  ruleType: "text", 
     priority:1,
     pattern: /\b(at|until)[\s]*([2][1-4]|[1][0-9]|[1-9])([0-5][0-9])\b/, 
     result: BetweenTimeEvent("PERIOD_TIME") 
  }
    
   //n days/week
  
  {  ruleType: "text", 
     priority:2,
     pattern: /\b[2-7][\s]*(days)\/(week)\b/, 
     result: BetweenTimeEvent("PERIOD_TIME") 
  }
  
   // 24/7
  
  {  ruleType: "text", 
     priority:1,
     pattern: /\b24\/7\b/, 
     result: BetweenTimeEvent("PERIOD_TIME") 
  }
  
   // may fall
  
  {  ruleType: "text", 
     priority:1,
     pattern: /\b(may (fall|be))\b/, 
     result: BetweenTimeEvent("PERIOD_TIME") 
  }
  
     // may fall
  
  {  ruleType: "text", 
     priority:1,
     pattern: /\b(march of protest)\b/, 
     result: BetweenTimeEvent("PERIOD_TIME") 
  }
  
     // n year/years
  
   { ruleType: "text", 
    priority:1,
    pattern: /\b((the last|about the last)[\s]*)?([1-9][0-9]?[0-9]?)[\s]*(year|years)\b/,
  	result: BetweenTimeEvent($0) 
  }
  
  
  ############FILTERS##################
  
  // the sun
  
  {  ruleType: "text", 
     priority:0,
     pattern: /\b(the sun)\b/, 
     result: BetweenTimeEvent("PERIOD_TIME") 
  }
  
  
  //filter the Sun
  
  { ruleType: "filter", 
    pattern: ( /the/ [ { word:/sun/ }] )  

  }
  
    //filter march of protest
  
  { ruleType: "filter", 
    pattern: ( /march/ /of/ /protest/ )  

  }
  
     
   // may fall
  
  { ruleType: "filter", 
    pattern: ( /may/ [ { word:/fall/ }] )  

  }
  
   // may be
  
  { ruleType: "filter", 
    pattern: ( /may/ [ { word:/be/ }] )  

  }
  
  { ruleType: "filter", 
    pattern: ( [ { word:/(fall|spring|second|march|may|sat|sun|min)s?/ } & !{ tag:/NN.*/ } ] ) 
   }
  
 