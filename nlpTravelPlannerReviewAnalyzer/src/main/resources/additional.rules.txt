CustomTimeEvent = { type: "CLASS", value: "com.codeminders.labs.timeextractor.sutime.CustomTimeEvent" }
BetweenTimeEvent = { type: "CLASS", value: "com.codeminders.labs.timeextractor.sutime.BetweenTimeEvent" }
 
   TIME_OF_DAY_MAP = {
    "morning": "morning",
    "afternoon": "afternoon",
    "evening": "evening",
    "night":" night",
    "noon": "noon",
    "midnight": "midnight"
  }
$TIME_OF_DAY = CreateRegex(Keys(TIME_OF_DAY_MAP))
  
DAYOFWEEK_MAP = {
   "monday": "monday",
    "tuesday": "tuesday",
    "wednesday": "wednesday",
    "thursday":" thursday",
    "friday":" friday",  
    "saturday": "saturday",
    "sunday": "sunday"
  }
  
     
  DAYOFWEEK_MAP_EASY = {
   "Sun": "Sunday",
   "Mon": "monday",
   "Tue": "tuesday",
   "Wed":" wednesday",
   "Thu":" thursday",
   "Thur":" thursday",  
   "Fri": "friday",
   "Sat": "saturday"
  }
  
MONTH_OF_YEAR_MAP = {
   "january": "january",
    "febr?y": "february",
    "march": "march",
    "april":" april",
    "may":" may",  
    "june": "june",
    "july": "july",
    "august": "august",
    "september": "september",
    "october": "october",
    "november": "november",
    "december": "december"
  }
  
  
  MONTH_OF_YEAR_EASY_MAP = {
   "jan": "jan",
    "feb": "feb",
    "mar": "mar",
    "apr":" apr",
    "may":" may",  
    "jun": "jun",
    "jul": "jul",
    "aug": "aug",
    "sept": "sept",
    "oct": "oct",
    "nov": "nov",
    "dec": "dec"
  }
  
    BASIC_ORDINAL_MAP = {
    "first": 1,
    "second": 2,
    "third": 3,
    "fourth": 4,
    "fifth": 5,
    "sixth": 6,
    "seventh": 7,
    "eighth": 8,
    "ninth": 9,
    "tenth": 10,
    "eleventh": 11,
    "twelfth": 12,
    "thirteenth": 13,
    "fourteenth": 14,
    "fifteenth": 15,
    "sixteenth": 16,
    "seventeenth": 17,
    "eighteenth": 18,
    "nineteenth": 19,
    "twentieth": 20,
    "thirtieth": 30,
    "fortieth": 40,
    "fiftieth": 50,
    "sixtieth": 60,
    "seventieth": 70,
    "eightieth": 80,
    "ninetieth": 90,
    "hundredth": 100
  }
  $BasicOrdTerm = CreateRegex(Keys(BASIC_ORDINAL_MAP))
  
  
$DAY_OF_WEEK = CreateRegex(Keys(DAYOFWEEK_MAP))  
$MONTH_OF_YEAR = CreateRegex(Keys(MONTH_OF_YEAR_MAP))
$DAYOFWEEK_EASY = CreateRegex(Keys(DAYOFWEEK_MAP_EASY))
$MONTH_OF_YEAR_EASY=CreateRegex(Keys(MONTH_OF_YEAR_EASY_MAP))

$PM_AM_TIME = "[0-9][\s]?([p,P]?[m,M])?(|[a,A][m,M])?[\s-]?([0-9][\s]?([p,P]?[m,M])?(|[a,A][m,M])?)?"
 
  // first monday of month 
  
  { ruleType: "text", pattern: /(($BasicOrdTerm|[1-9](rd|th))([\s])?($DAY_OF_WEEK|$DAYOFWEEK_EASY)[\s]?(of)[\s]?(the)?[\s]?(month))/,
  	 result: BetweenTimeEvent($0) 
  }
  
  
   // Sunday 17 of July
  
  { ruleType: "text", 
    pattern: /(($DAY_OF_WEEK)[\s]*((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))[\s]?((of)(the)?[\s]?($MONTH_OF_YEAR)))/,
  	 result: BetweenTimeEvent($0) 
  }
  
  
   // Tuesday - Sunday, Wed.-Fri.
   
  
  { ruleType: "text", 
    pattern: /(($DAY_OF_WEEK)[\s]*[-][\s]*($DAY_OF_WEEK))/,
  	 result: BetweenTimeEvent($0) 
  }
  
    
  { ruleType: "text", 
    pattern: /(($DAYOFWEEK_EASY)[.]?[\s]*[-][\s]*($DAYOFWEEK_EASY)[.]?)/,
  	 result: BetweenTimeEvent($0) 
  }
  

  // between morning and evening
  // between morning and 12h
  
  {
   ruleType: "text",
   pattern: /(between)[\s*]($TIME_OF_DAY|$DAY_OF_WEEK|([0-9][\s]?([p,P]?[m,M])|([a,A][m,M])?[\s-]?(to)?([0-9][\s]?([p,P]?[m,M])?(|[a,A][m,M])?)?))[\s*](and)[\s*]($TIME_OF_DAY|$DAY_OF_WEEK|([0-9][\s]?([p,P]?[m,M])?(|[a,A][m,M])?[\s-]?([0-9][\s]?([p,P]?[m,M])?(|[a,A][m,M])?)?))/ ,
   result: CustomTimeEvent($0)
  }
  
  
 // between 11:30 and 12h
 // between 11:30 and 12:00
 // between 11h and 14h
 
 {
   ruleType: "text",
   pattern: /(between)(([\s*]([01]?[0-9]|2[0-3])[:.,][0-5][0-9])|([\s*][0-2][0-9][\s]?h?))[\s]*(([p,P][.]?[m,M][.]?)|([a,A][.]?[m,M][.]?))?[\s]*(and)(([\s*]([01]?[0-9]|2[0-3])[:.,][0-5][0-9])|([\s*][0-2][0-9][\s]?h?))[\s]*(([p,P][.]?[m,M][.]?)|([a,A][.]?[m,M][.]?))?/ ,
   result: BetweenTimeEvent($0)
  }
  
 
// from 21 to 24 July 2014 etc. 
  {  ruleType: "text", 
   pattern: /(from)?[\s]?((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))[\s]*(to)[\s]*((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))[\s]*($MONTH_OF_YEAR)[\s,.]*((19|20)\d\d)?/, 
   result: BetweenTimeEvent($0) 
   }

   
  //11:30-12:30, 11.30 am-12.30 pm, 
  {
   ruleType: "text",
   priority:1,
   pattern: /(([01]?[0-9]|2[0-3]|1[0-9])([:.,][0-5][0-9])?)[\s]*(([p,P][m,M])|([a,A][m,M]))?[\s]?[-]([\s])?(([01]?[0-9]|2[0-3])[:.,][0-5][0-9][\s]*(([p,P][.]?[m,M][.]?)|([a,A][.]?[m,M][.]?))?[\s]*)/ ,
   result: BetweenTimeEvent($0)
  }
 
   // from time to time
   {
   ruleType: "text",
   pattern: /(from)?[\s]*(\b([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9][\s]?)(([p,P][.]?[m,M][.]?)|([a,A][.]?[m,M][.]?))?[\s]*(to|till|until)[\s]*((\b([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])[\s]?(([p,P][.]?[m,M][.]?)|([a,A][.]?[m,M][.]?))?[\s]*)/ ,
   result: BetweenTimeEvent($0)
   }
  
 // 1-5pm
 // 11-12am
 // 10am-5pm
   {
   ruleType: "text",
   pattern: /((([1-9])|([1][0-2]?))(([p,P][m,M])|([a,A][m,M]))?[\s]*-[\s]*(([1-9])|([1][0-2]))[\s]?(([p,P][m,M])|([a,A][m,M])))/ ,
   result: BetweenTimeEvent($0)
  }
  
 // weekday week day  	  	
 {
   ruleType: "text",
   pattern: /(week days|weekdays|weekday|week day)/,
   result: CustomTimeEvent("DATE") 
  }
  
 // lunch time
    
 {
   ruleType: "text",
   pattern: /(lunch time)/,
   result: CustomTimeEvent("TIME") 
  }
  
  // after lunch
   {
   ruleType: "text",
   pattern: /(after l?ch)/,
   result: CustomTimeEvent("TIME") 
  }
  
 //every 
  {
   ruleType: "text",
   pattern: /everyday|everymonth|everyyear|every year|every day|every month|each month|each day|each year/ ,
   result: CustomTimeEvent("EVERY") 
  }
  
   //for one year from the date
  {
   ruleType: "text",
   pattern: /for one year from the date/ ,
   result: CustomTimeEvent("for one year from the date") 
  }
  
  //through/thru month
       
   { 
    ruleType: "text",
	pattern: /(through|thru)[\s]($MONTH_OF_YEAR|$MONTH_OF_YEAR_EASY[.]?)([\s]?)([0-3][0-1][-][0-3][0-1])?[\s]?(^\d{4})?[\s]?($DAY_OF_WEEK)?[\s]?( (\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b)\b)?[\s]/,
	result: CustomTimeEvent("THROUGH TIME") 
	}
	 
	//mid or mid-late month
	
	{ 
    ruleType: "text",  
    priority: 1,
	pattern: /(mid|mid-late)[-\s]?($MONTH_OF_YEAR)/ ,
	result: CustomTimeEvent("SET") 
	}
	 

  //10.11pm
   {
   ruleType: "text",
   pattern: /^([01]?[0-9]|2[0-3])[:.,][0-5][0-9][\s]?(([p,P][m,M])|([a,A][m,M]))$/ ,
   result: CustomTimeEvent("TIME") 
  }
      
  // july 25 - june 26
  {
   ruleType: "text",
   pattern: /($MONTH_OF_YEAR)[\s]?[0-3][0-9][\s]*[-]*[\s]*($MONTH_OF_YEAR)[\s]?[0-3][0-9]?/,
   result: CustomTimeEvent("PERIOD_TIME") 
  }
  
  //mm/dd/yyyy 
  // 03/13/2014
  // 03.13.2014
  
  { ruleType: "text", pattern: /(0[1-9]|1[012])[.\/](0[1-9]|[12][0-9]|3[01])[.\/](19|20)\d\d/,
   result: CustomTimeEvent("DATE") } 
   
    //dd/mm/yyyy 
   // 13/03/2014
   // 13.03.2014
  
  { ruleType: "text", pattern: /(0[1-9]|[12][0-9]|3[01])[.\/](0[1-9]|1[012])[.\/](19|20)\d\d/,
   result: CustomTimeEvent("WeekEnds")  } 
   
  { ruleType: "text", pattern: /[\d][\s]?weeks/,
   result: CustomTimeEvent("Weeks")  }
   
  
  // summer hours 
  { ruleType: "text", pattern: /summer[\s]?(hours|hour)/,
   result: CustomTimeEvent("Summer")  }
   
  
  { ruleType: "text", pattern: /(whole|all|entire|full)[\s]? (day|month|year)/,
  	 result: CustomTimeEvent("whole")  
  }
  
  { ruleType: "text", pattern: /most of the year/,
  	 result: CustomTimeEvent("most of the year")  
  }
  
  { ruleType: "text", pattern: /this time of the year/,
  	 result: CustomTimeEvent("this time of the year")  
  }
  
  { ruleType: "text", pattern: /once a (month|year|day)/,
  	 result: CustomTimeEvent("this time of the year")  
  }
  

  
  // past 7 years 
  
  { ruleType: "text", pattern: /past[\s]?\b[\d]\b[\s]?years/,
  	 result: BetweenTimeEvent($0) 
  }
  
  // Fri, 6/27
  
  { ruleType: "text", pattern: /($DAYOFWEEK_EASY)[,][\s]*((\b[1-9]\b)|(\b[1][0-2]\b))\/((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))/,
  	 result: BetweenTimeEvent($0) 
  }
  

   // 1-2 hours
  
  { ruleType: "text", pattern: /(\b[1-9](([-,-][1-9][\s]*)|[0-9])?(hours|hrs)\b)/,
  	 result: BetweenTimeEvent($0) 
  }
  
    
  // 1-21 July 2014 etc.
  
  { ruleType: "text", pattern: /((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))[-]((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))[\s]*($MONTH_OF_YEAR)[\s]*((19|20)\d\d)?/,
  	 result: BetweenTimeEvent($0) 
  }
  
    // June 24-29 July 2014 etc.
  
  { ruleType: "text", pattern: /($MONTH_OF_YEAR)[\s]*((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))[-]((\b[1-9]\b)|(\b[1-2][0-9]\b)|(\b[3][0-1]\b))[\s]*((19|20)\d\d)?/,
  	 result: BetweenTimeEvent($0) 
  }
  

   // 30-45 minutes, 2 mns
	{ 
    ruleType: "text",
	pattern: /\b(([1-9])|([1-9][0-9]))(([\s]*[-][\s]*(([1-9])|([1-9][0-9][0-9]?)))?[\s]?)?(minutes|minute|mins|min|mns)\b/,
	result: CustomTimeEvent("PERIOD_TIME") 
    }
    
      
   // long hours
  
  { ruleType: "text", pattern: /long hours/,
  	 result: CustomTimeEvent("long hours")  
  }
  
  //holidays
  
  { ruleType: "text", pattern: /New Years' Eve/,
  	 result: CustomTimeEvent("New Years' Eve")  
  }
  
  //holidays
  
  { ruleType: "text", pattern: /St Valentine's Day/,
  	 result: CustomTimeEvent("St Valentine's Day")  
  }
  
  // 14h00 
  {  ruleType: "text", 
     pattern: /(((([0]?[1-9])|([1][1-9]|[2][0-3]))\b(hours|h))[0-5][0-9])/, 
     result: CustomTimeEvent("PERIOD_TIME") 
  }
    
 // open until 10 
  { ruleType: "text", 
  pattern: /(open*|close*)[\s]*(until|till|before|up to)[\s]*([01]?[0-9]|2[0-3]|1[0-9])/ , 
  result: BetweenTimeEvent($0)
   }
   
  // filter lovely day, sunny day, windy day, Family Day, etc. 
  
  { ruleType: "filter",
	  pattern: ([(/[\w]*/) & ({ tag:/JJ.*/ }|{ tag:/NNP*/ } )][{ word:/day/}]) 
  }
  